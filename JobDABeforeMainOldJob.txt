using System;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using Ease.Core.DataAccess;
using Ease.Core.DataAccess.SQL;
using Ease.CoreSL.Model;
using Ease.PPIC.BO;
using System.Collections.Generic;
using DataSet = Ease.PPIC.BO.Data.DataSet;
using System.Text;
using System.Globalization;
using System.Net;
using System.IO;
using Ease.Core;

namespace Ease.PPIC.DataAccess
{
    public class JobDA : ServiceTemplate
    {
        public JobDA() : base("BasicDataService")
        {

        }

        #region Mapping

        #region Job
        private ObjectsTemplate<Job> CreateJobObjects(DataReader dr)
        {
            ObjectsTemplate<Job> items = new ObjectsTemplate<Job>();
            while (dr.Read())
            {
                Job item = CreateJobObject(dr);
                items.Add(item);
            }
            return items;
        }

        private Job CreateJobObject(DataReader dr)
        {
            Job item = new Job();
            MapJobObject(dr, item);
            return item;
        }

        private JobConcernType CreateJobConcernObject(DataReader dr)
        {
            JobConcernType item = new JobConcernType();
            item.JobTypeID = dr.GetInt64("JobTypeID").Value;
            return item;
        }

        private void MapJobObject(DataReader dr, Job item)
        {
            item.PKID = dr.GetInt64("JobID").Value;
            item.JobCode = dr.GetString("JobCode", string.Empty);
            item.JobTypeID = (JobTypeEnum)dr.GetInt16("JobTypeID"); /*dr.GetInt64("JobTypeID", 0);*/
            item.IssueDate = dr.GetDateTime("IssueDate", DateTime.MinValue);
            item.Subject = dr.GetString("Subject", string.Empty);
            item.Remarks = dr.GetString("Remarks", string.Empty);
            item.EntryDateTime = dr.GetDateTime("EntryDateTime", DateTime.MinValue);
            item.Status = (EnumJobStatus)dr.GetInt16("Status");
            item.StatusString = ((EnumJobStatus)dr.GetInt64("Status", 0)).ToString();
            item.CustomerID = dr.GetInt64("CustomerID");
            item.ReferenceJobID = dr.GetInt64("ReferenceJobID");
            item.CustomerName = dr.GetString("CustomerName", true, null);
            item.CustomerPhone = dr.GetString("CustomerPhone", true, null);
            item.CustomerAddress = dr.GetString("CustomerAddress", true, null);
            item.DistributorID = dr.GetInt64("DistributorID", true, null);
            item.AssignedFFID = dr.GetInt64("AssignedFFID", true, 0);
            item.AssignedDate = dr.GetDateTime("AssignedTime", true, DateTime.Now);
            item.AssignedTime = dr.GetDateTime("AssignedTime", true, DateTime.MinValue);
            item.AssignmentStatus = (EnumJobAssignmentStatus)dr.GetInt16("AssignmentStatus", true, (short)EnumJobAssignmentStatus.None);
            item.AssignmentStatusTime = dr.GetDateTime("StatusTime", true, DateTime.Now);
            item.CreatedBy = dr.GetInt64("CreatedBy", 0);
            item.CreatedDate = dr.GetDateTime("CreatedDate", DateTime.MinValue);
            item.ModifiedBy = dr.GetInt64("ModifiedBy");
            item.ModifiedDate = dr.GetDateTime("ModifiedDate");
            item.CancelReason = dr.GetString("CancelReason", true, string.Empty);
            item.TeamName = dr.GetString("TeamName", true, string.Empty);
            item.FromSlot = dr.GetInt64("FromSlot", true, 0);
            item.ToSlot = dr.GetInt64("ToSlot", true, 0);
            item.StartDateTime = dr.GetDateTime("StartDateTime", true, DateTime.MinValue);
            item.EndDateTime = dr.GetDateTime("EndDateTime", true, DateTime.MinValue);
            item.TeamID = dr.GetInt64("TeamID", true, 0);
            item.DivisionName = dr.GetString("DivisionName", true, string.Empty);
            item.CustomerNID = dr.GetString("CustomerNID", true, null);
            item.CustomerCode = dr.GetString("CustomerCode", true, null);
            item.Gender = (GenderTypeEnum)dr.GetInt32("Gender", true, 0);
            item.CustomerDOB = dr.GetDateTime("CustomerDOB", true, DateTime.MinValue);
            item.Landmark = dr.GetString("Landmark", true, null);
            item.HouseNo = dr.GetString("HouseNo", true, null);
            item.RoadNo = dr.GetString("RoadNo", true, null);
            item.Cpe = (CPEEnum)dr.GetInt32("Cpe", true, 0);
            item.CpeName = EnumDescription.GetEnumDescription(item.Cpe);
            item.servicePackageID = dr.GetInt64("servicePackageID", true, 0);
            item.DealerID = dr.GetInt64("DealerID", true, null);
            item.STBnumber = dr.GetString("STBnumber", true, null);
            item.STBSerial = dr.GetString("STBSerial", true, null);
            item.SubscriberId = dr.GetString("SubscriberId", true, null);
            item.FirstName = dr.GetString("FirstName", true, null);
            item.LastName = dr.GetString("LastName", true, null);
            item.DistrictId = dr.GetInt32("DistrictID", true, 0);
            item.DistrictName = dr.GetString("DistrictName", true, string.Empty);
            item.ThanaID = dr.GetInt32("ThanaID", true, 0);
            item.ThanaName = dr.GetString("ThanaName", true, string.Empty);
            item.Remarks = dr.GetString("Remarks", true, string.Empty);
            item.Classification = (ClassificationEnum)dr.GetInt32("Classification", true, 0);
            item.referenceCustomerID = dr.GetInt32("ReferenceCustomerID", true, 0);
            item.SalesProgramID = dr.GetInt32("SalesProgramID", true, 0);
            item.CustomerReferenceType = (CustomerReferenceTypeEnum)dr.GetInt32("CustomerReferenceType", true, 0);
            item.ReferenceCustomerPhone = dr.GetString("ReferenceCustomerPhone", true, string.Empty);
            item.IsPaymentDone = dr.GetBoolean("IsPaymentDone", true, false);
            item.ReferenceCustomerName = dr.GetString("ReferenceCustomerName", true, string.Empty);
            item.DistributorName = dr.GetString("DistributorName", true, string.Empty);
            item.FullAddress = dr.GetString("FullAddress", true, string.Empty);
            item.SalesProgramName = dr.GetString("SalesProgramName", true, string.Empty);
            item.ReasonCategory = dr.GetString("ReasonCategory", true, string.Empty);
            item.CreatorName = dr.GetString("CreatorName", true, string.Empty);
            item.ReferrerSubID = dr.GetString("ReferrerSubID", true, string.Empty);
            item.IsSubscriberIdInLead = dr.GetBoolean("IsSubscriberIdInLead", true, false);
            item.IsInstallerBehaviour = dr.GetBoolean("IsInstallerBehaviour", true, false);
            item.IsPictureQuality = dr.GetBoolean("IsPictureQuality", true, false);
            item.IsFineProduct = dr.GetBoolean("IsFineProduct", true, false);
            item.IsSTBRemoteControl = dr.GetBoolean("IsSTBRemoteControlUnit", true, false);
            item.CustomerRemarks = dr.GetString("CustomerRemarks", true, string.Empty);
            item.QrCode = dr.GetString("QrCode", true, string.Empty);
            item.RescheduleDate = dr.GetDateTime("RescheduleDate", true, DateTime.MinValue);
            item.ReferenceType = (JobReference)dr.GetInt32("ReferenceType", true, 0);
            item.ReferenceID = dr.GetInt32("ReferenceID", true, 0);
        }

        #region WFMSJobGridView
        private ObjectsTemplate<WFMSJob> CreateWFMSJobGridViewObjects(DataReader dr)
        {
            ObjectsTemplate<WFMSJob> items = new ObjectsTemplate<WFMSJob>();
            while (dr.Read())
            {
                WFMSJob item = CreateWFMSJobGridViewObject(dr);
                items.Add(item);
            }
            return items;
        }
        private WFMSJob CreateWFMSJobGridViewObject(DataReader dr)
        {
            WFMSJob item = new WFMSJob();
            MapWFMSGridViewJobObject(dr, item);
            return item;
        }
        private void MapWFMSGridViewJobObject(DataReader dr, WFMSJob item)
        {
            item.PKID = dr.GetInt64("JobID").Value;
            item.JobCode = dr.GetString("JobCode", string.Empty);
            item.JobTypeID = (JobTypeEnum)dr.GetInt16("JobTypeID"); /*dr.GetInt64("JobTypeID", 0);*/
            item.IssueDate = dr.GetDateTime("IssueDate", DateTime.MinValue);
            item.Subject = dr.GetString("Subject", string.Empty);
            item.Remarks = dr.GetString("Remarks", string.Empty);
            item.EntryDateTime = dr.GetDateTime("EntryDateTime", DateTime.MinValue);
            item.Status = (EnumJobStatus)dr.GetInt16("Status");
            item.StatusString = ((EnumJobStatus)dr.GetInt64("Status", 0)).ToString();
            item.CustomerID = dr.GetInt64("CustomerID");
            item.CustomerName = dr.GetString("CustomerName", true, null);
            item.CustomerPhone = dr.GetString("CustomerPhone", true, null);
            item.CustomerAddress = dr.GetString("CustomerAddress", true, null);
            item.DistributorID = dr.GetInt64("DistributorID", true, null);
            item.AssignedFFID = dr.GetInt64("AssignedFFID", true, 0);
            item.AssignedDate = dr.GetDateTime("AssignedTime", true, DateTime.Now);
            item.AssignedTime = dr.GetDateTime("AssignedTime", true, DateTime.MinValue);
            item.AssignmentStatus = (EnumJobAssignmentStatus)dr.GetInt16("AssignmentStatus", true, (short)EnumJobAssignmentStatus.None);
            item.AssignmentStatusTime = dr.GetDateTime("StatusTime", true, DateTime.Now);
            item.CreatedBy = dr.GetInt64("CreatedBy", 0);
            item.CreatedDate = dr.GetDateTime("CreatedDate", DateTime.MinValue);
            item.CancelReason = dr.GetString("CancelReason", true, string.Empty);
            item.TeamName = dr.GetString("TeamName", true, string.Empty);
            item.FromSlot = dr.GetInt64("FromSlot", true, 0);
            item.ToSlot = dr.GetInt64("ToSlot", true, 0);
            item.StartDateTime = dr.GetDateTime("StartDateTime", true, DateTime.MinValue);
            item.EndDateTime = dr.GetDateTime("EndDateTime", true, DateTime.MinValue);
            item.TeamID = dr.GetInt64("TeamID", true, 0);
            item.CustomerNID = dr.GetString("CustomerNID", true, null);
            item.CustomerCode = dr.GetString("CustomerCode", true, null);
            item.Gender = (GenderTypeEnum)dr.GetInt32("Gender", true, 0);
            item.Landmark = dr.GetString("Landmark", true, null);
            item.HouseNo = dr.GetString("HouseNo", true, null);
            item.RoadNo = dr.GetString("RoadNo", true, null);
            item.Cpe = (CPEEnum)dr.GetInt32("Cpe", true, 0);
            item.CpeName = EnumDescription.GetEnumDescription(item.Cpe);
            item.servicePackageID = dr.GetInt64("servicePackageID", true, 0);
            item.DealerID = dr.GetInt64("DealerID", true, null);
            item.STBnumber = dr.GetString("STBnumber", true, null);
            item.STBSerial = dr.GetString("STBSerial", true, null);
            item.SubscriberId = dr.GetString("SubscriberId", true, null);
            item.FirstName = dr.GetString("FirstName", true, null);
            item.LastName = dr.GetString("LastName", true, null);
            //item.DistrictId = dr.GetInt32("DistrictID", true, 0);
            //item.DistrictName = dr.GetString("DistrictName", true, string.Empty);
            item.ThanaID = dr.GetInt32("ThanaID", true, 0);
            item.ThanaName = dr.GetString("ThanaName", true, string.Empty);
            item.Remarks = dr.GetString("Remarks", true, string.Empty);
            //item.Classification = (ClassificationEnum)dr.GetInt32("Classification", true, 0);
            //item.referenceCustomerID = dr.GetInt32("ReferenceCustomerID", true, 0);
            //item.SalesProgramID = dr.GetInt32("SalesProgramID", true, 0);
            //item.CustomerReferenceType = (CustomerReferenceTypeEnum)dr.GetInt32("CustomerReferenceType", true, 0);
            //item.ReferenceCustomerPhone = dr.GetString("ReferenceCustomerPhone", true, string.Empty);
            //item.IsPaymentDone = dr.GetBoolean("IsPaymentDone", true, false);
            //item.ReferenceCustomerName = dr.GetString("ReferenceCustomerName", true, string.Empty);
            item.DistributorName = dr.GetString("DistributorName", true, string.Empty);
            item.FullAddress = dr.GetString("FullAddress", true, string.Empty);
            //item.SalesProgramName = dr.GetString("SalesProgramName", true, string.Empty);
            //item.ReasonCategory = dr.GetString("ReasonCategory", true, string.Empty);
            //item.CreatorName = dr.GetString("CreatorName", true, string.Empty);
            //item.IsSubscriberIdInLead = dr.GetBoolean("IsSubscriberIdInLead", true, false);
            item.CustomerRemarks = dr.GetString("CustomerRemarks", true, string.Empty);
            item.RescheduleDate = dr.GetDateTime("RescheduleDate", true, DateTime.MinValue);
            item.ReferenceType = (JobReference)dr.GetInt32("ReferenceType", true, 0);
            item.ReferenceID = dr.GetInt32("ReferenceID", true, 0);
        }

        #endregion

        #region Map LeadGeneration
        private ObjectsTemplate<Job> CreateLeadGenerationObjects(DataReader dr)
        {
            ObjectsTemplate<Job> items = new ObjectsTemplate<Job>();
            while (dr.Read())
            {
                Job item = CreateLeadGenerationObject(dr);
                items.Add(item);
            }
            return items;
        }

        private Job CreateLeadGenerationObject(DataReader dr)
        {
            Job item = new Job();
            MapLeadGenerationObject(dr, item);
            return item;
        }

        private void MapLeadGenerationObject(DataReader dr, Job item)
        {
            item.PKID = dr.GetInt64("JobID").Value;
            item.JobTypeID = (JobTypeEnum)dr.GetInt16("JobTypeID");/* dr.GetInt64("JobTypeID", 0);*/
            item.JobCode = dr.GetString("JobCode", string.Empty);
            item.IssueDate = dr.GetDateTime("IssueDate", DateTime.MinValue);
            item.EntryDateTime = dr.GetDateTime("EntryDateTime", DateTime.MinValue);
            item.Status = (EnumJobStatus)dr.GetInt16("Status");
            item.FirstName = dr.GetString("FirstName", true, null);
            item.LastName = dr.GetString("LastName", true, null);
            item.Remarks = dr.GetString("Remarks", string.Empty);
            item.CancelReason = dr.GetString("CancelReason", true, string.Empty);
            item.Gender = (GenderTypeEnum)dr.GetInt32("Gender", true, 0);
            item.Landmark = dr.GetString("Landmark", true, null);
            item.HouseNo = dr.GetString("HouseNo", true, null);
            item.RoadNo = dr.GetString("RoadNo", true, null);
            item.Cpe = (CPEEnum)dr.GetInt32("Cpe", true, 0);
            item.CustomerNID = dr.GetString("CustomerNID", true, null);
            item.CustomerDOB = dr.GetDateTime("CustomerDOB", true, DateTime.MinValue);
            item.CustomerName = dr.GetString("CustomerName", true, null);
            item.CustomerPhone = dr.GetString("CustomerPhone", true, null);
            item.SubscriberId = dr.GetString("SubscriberId", true, null);
            item.IsSubscriberIdInLead = dr.GetBoolean("IsSubscriberIdInLead", true, false);
            item.SalesProgramID = dr.GetInt32("SalesProgramID", true, 0);
            item.IsPaymentDone = dr.GetBoolean("IsPaymentDone", true, false);
            item.DistributorID = dr.GetInt64("DistributorID", true, 0);
            item.DistrictId = dr.GetInt32("DistrictID", true, 0);
            item.ThanaID = dr.GetInt32("ThanaID", true, 0);
            item.referenceCustomerID = dr.GetInt32("ReferenceCustomerID", true, 0);
            item.CustomerReferenceType = (CustomerReferenceTypeEnum)dr.GetInt32("CustomerReferenceType", true, 0);
            item.DistrictName = dr.GetString("DistrictName", true, string.Empty);
            item.ThanaName = dr.GetString("ThanaName", true, string.Empty);
            item.DistributorName = dr.GetString("DistributorName", true, string.Empty);
            item.FullAddress = dr.GetString("FullAddress", true, string.Empty);
            item.SalesProgramName = dr.GetString("SalesProgramName", true, string.Empty);
            item.CreatorName = dr.GetString("CreatorName", true, string.Empty);
            item.ReferrerSubID = dr.GetString("ReferrerSubID", true, string.Empty);
            item.CreatedBy = dr.GetInt64("CreatedBy", 0);
            item.CreatedDate = dr.GetDateTime("CreatedDate", DateTime.MinValue);
            item.ModifiedBy = dr.GetInt64("ModifiedBy");
            item.ModifiedDate = dr.GetDateTime("ModifiedDate");
            item.AssignedTime = dr.GetDateTime("AssignedTime", true, DateTime.MinValue);
            item.EndDateTime = dr.GetDateTime("EndDateTime", true, DateTime.MinValue);

        }

        #endregion

        #endregion

        #region JobAttachment
        private ObjectsTemplate<JobAttachment> CreateJobAttachmentObjects(DataReader dr)
        {
            ObjectsTemplate<JobAttachment> items = new ObjectsTemplate<JobAttachment>();
            while (dr.Read())
            {
                JobAttachment item = CreateJobAttachmentObject(dr);
                items.Add(item);
            }
            return items;
        }
        private JobAttachment CreateJobAttachmentObject(DataReader dr)
        {
            JobAttachment item = new JobAttachment();
            MapJobAttachmentObject(dr, item);
            return item;
        }
        private void MapJobAttachmentObject(DataReader dr, JobAttachment item)
        {
            item.PKID = dr.GetInt64("JobAttachmentID").Value;
            item.JobID = dr.GetInt64("JobID", 0);
            item.JobUpdateID = dr.GetInt64("JobUpdateID");
            item.FileName = dr.GetString("FileName");
            item.FileID = dr.GetString("FileID");
        }

        #endregion

        #region JobNotification
        private ObjectsTemplate<JobNotification> CreateJobNotificationObjects(DataReader dr)
        {
            ObjectsTemplate<JobNotification> items = new ObjectsTemplate<JobNotification>();
            while (dr.Read())
            {
                JobNotification item = CreateJobNotificationObject(dr);
                items.Add(item);
            }
            return items;
        }
        private JobNotification CreateJobNotificationObject(DataReader dr)
        {
            JobNotification item = new JobNotification();
            MapJobNotificationObject(dr, item);
            return item;
        }

        private void MapJobNotificationObject(DataReader dr, JobNotification item)
        {
            item.PKID = dr.GetInt64("JobNotificationID").Value;
            item.JobID = dr.GetInt64("JobID").Value;
            item.JobUpdateID = dr.GetInt64("JobUpdateID");
            item.FFID = dr.GetInt64("FFID", 0);
            item.Type = (EnumJobNotificationType)dr.GetInt16("NotificationType", (short)EnumJobNotificationType.Email);
            item.NotificationText = dr.GetString("NotificationText");
        }

        #endregion

        #region JobAssignment
        private ObjectsTemplate<JobAssignment> CreateJobAssignmentObjects(DataReader dr)
        {
            ObjectsTemplate<JobAssignment> items = new ObjectsTemplate<JobAssignment>();
            while (dr.Read())
            {
                JobAssignment item = CreateJobAssignmentObject(dr);
                items.Add(item);
            }
            return items;
        }
        private JobAssignment CreateJobAssignmentObject(DataReader dr)
        {
            JobAssignment item = new JobAssignment();
            MapJobAssignmentObject(dr, item);
            return item;
        }
        private void MapJobAssignmentObject(DataReader dr, JobAssignment item)
        {
            item.PKID = dr.GetInt64("JobAssignmentID").Value;
            item.JobID = dr.GetInt64("JobID").Value;
            item.AssignedFromFFID = dr.GetInt64("AssignedFromFFID", 0);
            item.AssignedFFID = dr.GetInt64("AssignedFFID", 0);
            item.AssignedTime = dr.GetDateTime("AssignedTime", DateTime.MinValue);
            item.Status = (EnumJobAssignmentStatus)dr.GetInt16("AssignmentStatus", (short)EnumJobAssignmentStatus.None);
            item.StatusTime = dr.GetDateTime("StatusTime", DateTime.Now);
            item.Remarks = dr.GetString("Remarks");
            item.FromSlot = dr.GetInt32("FromSlot", true, 0);
            item.ToSlot = dr.GetInt32("ToSlot", true, 0);
            item.AssignedFFName = dr.GetString("AssignedFFName", true, "");
            item.AssignedFFCode = dr.GetString("AssignedFFCode", true, "");
        }

        #endregion

        #region JobUpdate
        private ObjectsTemplate<JobUpdate> CreateJobUpdateObjects(DataReader dr)
        {
            ObjectsTemplate<JobUpdate> items = new ObjectsTemplate<JobUpdate>();
            while (dr.Read())
            {
                JobUpdate item = CreateJobUpdateObject(dr);
                items.Add(item);
            }
            return items;
        }

        private JobUpdate CreateJobUpdateObject(DataReader dr)
        {
            JobUpdate item = new JobUpdate();
            MapJobUpdateObject(dr, item);
            return item;
        }

        private void MapJobUpdateObject(DataReader dr, JobUpdate item)
        {
            item.PKID = dr.GetInt64("JobUpdateID").Value;
            item.UpdateByFFID = dr.GetInt64("UpdateByFFID", 0);
            item.JobID = dr.GetInt64("JobID").Value;
            item.UpdateTime = dr.GetDateTime("UpdateTime", DateTime.MinValue);
            item.Remarks = dr.GetString("Remarks");
            item.RemarksID = dr.GetInt64("RemarksID", 0);
            item.Longitude = dr.GetDecimal("Longitude", true, 0);
            item.Latitude = dr.GetDecimal("Latitude", true, 0);
            item.Name = dr.GetString("Name", true, string.Empty);
            item.Location = dr.GetString("Location", true, string.Empty);
            item.CategoryID = dr.GetInt64("CategoryID", true, 0);
            item.IsJobChanged = dr.GetInt64("IsJobChanged", true, 0);
        }

        #endregion

        #region JobCancelLog
        private ObjectsTemplate<JobCancelLog> CreateJobCancelObjects(DataReader dr)
        {
            ObjectsTemplate<JobCancelLog> items = new ObjectsTemplate<JobCancelLog>();
            while (dr.Read())
            {
                JobCancelLog item = CreateJobCancelObject(dr);
                items.Add(item);
            }
            return items;
        }

        private JobCancelLog CreateJobCancelObject(DataReader dr)
        {
            JobCancelLog item = new JobCancelLog();
            MapJobCancelLogObject(dr, item);
            return item;
        }

        private void MapJobCancelLogObject(DataReader dr, JobCancelLog item)
        {
            item.PKID = dr.GetInt64("JobLogID").Value;
            item.PerFormActionByFFID = dr.GetInt64("AssignedFFID", 0);
            item.JobID = dr.GetInt64("JobID").Value;
            item.CancelTime = dr.GetDateTime("CancelTime", DateTime.MinValue);
            item.Remarks = dr.GetString("Remarks", true, null);
            item.RemarksID = dr.GetInt64("RemarksID", 0);
            item.PrevAssignedFFID = dr.GetInt64("AssignedFromFFID", true, 0);
            item.CancelTeamName = dr.GetString("TeamName", true, null);
        }

        #endregion

        #endregion

        #region Service Implementation

        #region Get

        public ObjectsTemplate<Job> GetJobs()
        {
            ObjectsTemplate<Job> items;
            TransactionContext tc = null;

            try
            {
                tc = TransactionContext.Begin(ServiceName);
                string sql = SQLParser.MakeSQL("SELECT j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime FROM Job j " +
                                               "LEFT JOIN JobAssignment ja " +
                                               "ON j.JobID = ja.JobID");

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return items;
        }

        public Job Get(long jobId)
        {
            Job item;
            TransactionContext tc = null;
            try
            {
                tc = TransactionContext.Begin(ServiceName);
                item = Get(tc, jobId);
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
            return item;
        }
        public Job Get(TransactionContext tc, long jobId)
        {
            Job item = null;
            try
            {
                var commandText = SQLParser.MakeSQL(@"SELECT j.*, 
                                                    (CASE WHEN j.CustomerReferenceType = 1 THEN bp.Name END) AS ReferenceCustomerName, 
                                                    (CASE WHEN j.CustomerReferenceType = 1 THEN bp.OwnerMobile END) AS ReferenceCustomerPhone
                                                     FROM [Job] AS j 
                                                     LEFT JOIN BusinessPartner bp ON bp.BPID = j.ReferenceCustomerID
                                                     WHERE j.JobID=%n", jobId);
                DataReader dr = new DataReader(tc.ExecuteReader(commandText));
                if (dr.Read())
                {
                    item = CreateJobObject(dr);
                }
                dr.Close();

                if (item != null)
                {
                    item.JobUpdates = GetJobStatusByJobId(tc, item.PKID);
                    FileManagerDA fileManagerDA = new FileManagerDA();
                    item.UploadFiles = fileManagerDA.GetByReferenceID(UploaderModuleEnum.Job, item.PKID);
                }

            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return item;
        }

        public ObjectsTemplate<Job> GetJobBySubscriberID(string subscriberIDs)
        {
            TransactionContext tc = null;
            ObjectsTemplate<Job> items = new ObjectsTemplate<Job>();

            try
            {
                tc = TransactionContext.Begin(ServiceName);
                string sql = SQLParser.MakeSQL("SELECT * FROM JOB j WHERE j.SubscriberId in (%q) and JobTypeID in (1)", subscriberIDs);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return items;
        }

        public Job GetJobUploadFiles(long jobId)
        {
            TransactionContext tc = null;
            Job item = null;

            try
            {
                tc = TransactionContext.Begin(ServiceName);
                string sql = SQLParser.MakeSQL("SELECT * FROM JOB j WHERE j.JobId=%n", jobId);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                if (dr.Read())
                {
                    item = CreateJobObject(dr);
                }

                dr.Close();
                if (item != null)
                    item.UploadFiles = new FileManagerDA().GetByReferenceID(tc, UploaderModuleEnum.MobileFileUploadsForJob, item.PKID, null);
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return item;
        }

        public ObjectsTemplate<Job> GetJobsByBranch(long branchId)
        {
            TransactionContext tc = null;
            ObjectsTemplate<Job> items;

            try
            {
                tc = TransactionContext.Begin(ServiceName);
                string sql = SQLParser.MakeSQL("SELECT j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime FROM Job j " +
                                               "LEFT JOIN JobAssignment ja " +
                                               "ON j.JobID = ja.JobID WHERE j.BranchID = %n", branchId);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return items;
        }

        public ObjectsTemplate<Job> GetJobsByTeamID(long branchID)
        {
            TransactionContext tc = null;
            ObjectsTemplate<Job> items;

            try
            {
                tc = TransactionContext.Begin(ServiceName);
                string sql = SQLParser.MakeSQL("SELECT j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime FROM Job j " +
                                               "LEFT JOIN JobAssignment ja " +
                                               "ON j.JobID = ja.JobID WHERE j.BranchID = %n", branchID);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return items;
        }

        public System.Data.DataSet GetAssingedJobs(DateTime fromdate, DateTime todate, long? distributorId)
        {
            System.Data.DataSet ds;
            string subquery = string.Empty;
            TransactionContext tc = null;
            try
            {
                tc = TransactionContext.Begin(ServiceName);

                var query = SQLParser.MakeSQL(@"select job.jobid,job.JobTypeID, JobCode, e.Name TeamName, ContactPerson Name, ContactPersonPhone Phone, 
                            jb.AssignedFFID TeamID, jb.fromslot, jb.toslot, Description Address,job.StartDateTime,job.EndDateTime
                             from job, jobAssignment jb, employees e where 
                            job.jobid =jb.jobid and e.EmployeeID=jb.AssignedFFID and scheduledate between %d
                            and %d and job.distributorID=%n and e.EmployeeType=%n order by scheduledate desc, e.Name
                            ", fromdate, todate, distributorId, (int)EmployeeTypeEnum.InstallationTeam);
                ds = tc.ExecuteDataSet(query);
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
            return ds;
        }

        //public ObjectsTemplate<Job> GetAllJobs(string distributorId, DateTime? fromDate, string jobCode, string subscriberId, string customerPhone, string stbNumber, EnumJobStatus? jobStatus)
        //{
        //    ObjectsTemplate<Job> jobs;
        //    ObjectsTemplate<JobCancelLog> jobcancelLogs = new ObjectsTemplate<JobCancelLog>();
        //    string query = string.Empty, subquery = string.Empty;
        //    string sqlClause = string.Empty;
        //    TransactionContext tc = null;
        //    try
        //    {
        //        tc = TransactionContext.Begin(ServiceName);

        //        sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("(j.Status != IIF(CAST(j.CreatedDate AS DATE) < CAST(%d AS DATE), %n, -99) OR j.Status = IIF(CAST(ja.StatusTime AS DATE) >= CAST(%d AS DATE), %n, j.Status)) AND ja.JobAssignmentID>0", fromDate, (int)EnumJobStatus.Completed, fromDate, (int)EnumJobStatus.Completed);

        //        if (!string.IsNullOrWhiteSpace(distributorId))
        //        {
        //            sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.distributorID IN (%q)", distributorId);
        //        }
        //        sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.JobTypeID IN (%n,%n)", (int)JobTypeEnum.NIR, (int)JobTypeEnum.SR);

        //        if (!string.IsNullOrWhiteSpace(jobCode))
        //        {
        //            sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("jobCode LIKE %s", ("%" + jobCode + "%"));
        //        }
        //        if (!string.IsNullOrWhiteSpace(subscriberId))
        //        {
        //            sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("subscriberId LIKE %s", ("%" + subscriberId + "%"));
        //        }
        //        if (!string.IsNullOrWhiteSpace(customerPhone))
        //        {
        //            sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CustomerPhone LIKE %s", ("%" + customerPhone + "%"));
        //        }
        //        if (!string.IsNullOrWhiteSpace(stbNumber))
        //        {
        //            sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("STBNumber LIKE %s", ("%" + stbNumber + "%"));
        //        }
        //        if (jobStatus != null)
        //        {
        //            sqlClause = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.Status = %n", (int)jobStatus.Value);
        //        }

        //        //  sqlClause = (sqlClause == null || sqlClause == string.Empty) ? "WHERE" : sqlClause + " AND";

        //        tc = TransactionContext.Begin(ServiceName);
        //        tc.CommandTimeOut = 7200;

        //        string sql = SQLParser.MakeSQL(@"SELECT j.* 
        //                                        FROM job j 
        //                                        LEFT JOIN JobAssignment ja ON j.JobID = ja.JobID
        //                                        %q ORDER BY JobID DESC", sqlClause);

        //        DataReader dr = new DataReader(tc.ExecuteReader(sql));

        //        jobs = CreateJobObjects(dr);
        //        dr.Close();

        //        string insql = "";

        //        if (jobs != null && jobs.Count > 0)
        //            insql = string.Join(",", jobs.Select(x => x.PKID));
        //        else
        //            insql = null;


        //        string sql1 = SQLParser.MakeSQL(@"select ja.*, e.Name AssignedFFName,e.Code AssignedFFCode from 
        //                                          job j Inner Join JobAssignment ja  ON  j.JobID = ja.JobID
        //                                          Inner Join employees e ON  e.employeeid =ja.AssignedFFID
        //                                          where j.jobid in (%q)", insql);

        //        dr = new DataReader(tc.ExecuteReader(sql1));
        //        ObjectsTemplate<JobAssignment> osd = CreateJobAssignmentObjects(dr);
        //        dr.Close();

        //        string sql3 = SQLParser.MakeSQL(@"DECLARE @TempTable TABLE(JobID int);
        //                                          INSERT INTO @TempTable(JobID)
        //                                          SELECT JobID FROM Job j WHERE j.jobid IN(%q)
        //                                          SELECT jd.* FROM  JobUpdate jd INNER JOIN
        //                                          (SELECT MAX(ju.JobUpdateID) JobUpdateID
        //                                          FROM JobUpdate ju
        //                                          WHERE ju.JobID IN (SELECT * FROM @TempTable)
        //                                          GROUP BY JobID)T ON T.JobUpdateID=jd.JobUpdateID", insql);
        //        dr = new DataReader(tc.ExecuteReader(sql3));
        //        ObjectsTemplate<JobUpdate> jobupds = CreateJobUpdateObjects(dr);
        //        dr.Close();

        //        string sql2 = SQLParser.MakeSQL(@"WITH cte AS
        //                                        (SELECT j.* FROM job j
        //                                        LEFT JOIN JobAssignment ja ON j.JobID = ja.JobID
        //                                        %q)
        //                                        SELECT MAX(cjl.[JobLogID]) [JobLogID], cj.JobID, cj.AssignedFFID,cj.AssignedFromFFID,
        //                                        cj.CancelTime,cj.Remarks,cj.RemarksID
        //                                        FROM CanceledJobLog cjl
        //                                        INNER JOIN CanceledJobLog cj on cj.JobLogID=cjl.JobLogID
        //                                        WHERE cjl.jobid in (SELECT c.JobID FROM cte c)
        //                                        AND CAST(cjl.CancelTime as Date) >= CAST(%d as Date)
        //                                        GROUP BY cj.JobID,cj.AssignedFFID,cj.AssignedFromFFID,
        //                                        cj.CancelTime,cj.Remarks,cj.RemarksID", sqlClause, fromDate);

        //        dr = new DataReader(tc.ExecuteReader(sql2));
        //        jobcancelLogs = CreateJobCancelObjects(dr);

        //        dr.Close();
        //        tc.End();

        //        foreach (Job ojob in jobs)
        //        {
        //            foreach (JobAssignment ja in osd)
        //            {
        //                if (ja.JobID == ojob.PKID)
        //                {
        //                    ojob.AssignedFFID = ja.AssignedFFID;
        //                    ojob.TeamName = ja.AssignedFFID == 0 ? "N/A" : ja.AssignedFFName;
        //                    ojob.FromSlot = ja.FromSlot;
        //                    ojob.ToSlot = ja.ToSlot;
        //                    ojob.TeamID = ja.AssignedFFID == 0 ? 0 : ja.AssignedFFID;
        //                    ojob.AssignedTime = ja.AssignedTimeMinValue;
        //                    ojob.TeamCode = ja.AssignedFFID == 0 ? "N/A" : ja.AssignedFFCode;
        //                }
        //            }

        //            foreach (JobUpdate ja in jobupds)
        //            {
        //                if (ja.JobID == ojob.PKID)
        //                {
        //                    ojob.Remarks = ja.Remarks;
        //                }
        //            }

        //            foreach (JobCancelLog jcl in jobcancelLogs)
        //            {
        //                if (jcl.JobID == ojob.PKID)
        //                {
        //                    ojob.CancelRemarksID = jcl.RemarksID;
        //                    ojob.CancelRemarks = jcl.Remarks;
        //                    ojob.CancelLogTime = jcl.CancelTime;
        //                    ojob.PerFormActionByFFID = jcl.PerFormActionByFFID;
        //                    ojob.CancelTeamName = jcl.CancelTeamName;
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception e)
        //    {
        //        tc?.HandleError();
        //        throw new Exception(e.Message, e);
        //    }
        //    return jobs;
        //}

        public ObjectsTemplate<WFMSJob> GetAllJobs(string distributorId, DateTime? fromDate, string jobCode, string subscriberId, string customerPhone, string stbNumber, EnumJobStatus? jobStatus)
        {

            ObjectsTemplate<WFMSJob> jobs;
          //  ObjectsTemplate<Job> finalJobs=new ObjectsTemplate<Job>();
            ObjectsTemplate<JobCancelLog> jobcancelLogs = new ObjectsTemplate<JobCancelLog>();
            string query = string.Empty, subquery = string.Empty;
            string sqlClause = string.Empty;
            TransactionContext tc = null;
            try
            {
              
                if (!string.IsNullOrWhiteSpace(jobCode))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("jobCode LIKE %s", ("%" + jobCode + "%"));
                }
                if (!string.IsNullOrWhiteSpace(subscriberId))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("subscriberId LIKE %s", ("%" + subscriberId + "%"));
                }
                if (!string.IsNullOrWhiteSpace(customerPhone))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CustomerPhone LIKE %s", ("%" + customerPhone + "%"));
                }
                if (!string.IsNullOrWhiteSpace(stbNumber))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("STBNumber LIKE %s", ("%" + stbNumber + "%"));
                }
                if (jobStatus != null)
                {
                    sqlClause = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.Status = %n", (int)jobStatus.Value);
                }

                sqlClause = (sqlClause == null || sqlClause == string.Empty) ? "WHERE" : sqlClause + " AND";

                tc = TransactionContext.Begin(ServiceName);
           

                string sql = SQLParser.MakeSQL(@"SELECT T.* FROM 
                                                                (select
                                                                    j.jobID,j.JobTypeID,j.JobCode,j.IssueDate,j.Subject,j.Remarks,j.Status,j.CustomerID,
                                                                          j.CustomerName,j.CustomerPhone,j.StartDateTime,j.EndDateTime,j.CreatedBy,j.CreatedDate,
                                                                          j.CancelReason,j.ThanaID,j.DistributorID,j.STBnumber,j.Gender,j.Landmark,j.HouseNo,j.RoadNo,
                                                                          j.cpe,j.servicePackageID,j.CustomerNID,j.DealerID,j.SubscriberId,j.FirstName,j.LastName,j.CustomerRemarks,
                                                                    j.EntryDateTime,j.RescheduleDate
                                                                From job j %q j.CreatedDate < %d and j.status !=%n and j.distributorID in (%q) and j.JobTypeID in (1,2)
                                                                union
                                                                   select
                                                                    j.jobID,j.JobTypeID,j.JobCode,j.IssueDate,j.Subject,j.Remarks,j.Status,j.CustomerID,
                                                                          j.CustomerName,j.CustomerPhone,j.StartDateTime,j.EndDateTime,j.CreatedBy,j.CreatedDate,
                                                                          j.CancelReason,j.ThanaID,j.DistributorID,j.STBnumber,j.Gender,j.Landmark,j.HouseNo,j.RoadNo,
                                                                          j.cpe,j.servicePackageID,j.CustomerNID,j.DealerID,j.SubscriberId,j.FirstName,j.LastName,j.CustomerRemarks,
                                                                    j.EntryDateTime,j.RescheduleDate
                                                                From job j %q j.CreatedDate >= %d  and j.distributorID in (%q) and j.JobTypeID in (1,2)
                                                                union 
                                                                   select
                                                                    j.jobID,j.JobTypeID,j.JobCode,j.IssueDate,j.Subject,j.Remarks,j.Status,j.CustomerID,
                                                                          j.CustomerName,j.CustomerPhone,j.StartDateTime,j.EndDateTime,j.CreatedBy,j.CreatedDate,
                                                                          j.CancelReason,j.ThanaID,j.DistributorID,j.STBnumber,j.Gender,j.Landmark,j.HouseNo,j.RoadNo,
                                                                          j.cpe,j.servicePackageID,j.CustomerNID,j.DealerID,j.SubscriberId,j.FirstName,j.LastName,j.CustomerRemarks,
                                                                    j.EntryDateTime,j.RescheduleDate
                                                                From job j INNER JOIN JobAssignment ja ON ja.JobID=j.JobID
                                                                %q CAST(ja.StatusTime as Date) >= CAST(%d as Date) and status =%n and distributorID in (%q) and JobTypeID in (1,2)
                                                                )T ORDER BY T.JobID desc", sqlClause, fromDate, EnumJobStatus.Completed, distributorId,
                                                                              sqlClause, fromDate, distributorId,
                                                                              sqlClause, fromDate, EnumJobStatus.Completed, distributorId
                                                                              );

                DataReader dr = new DataReader(tc.ExecuteReader(sql));

                jobs = CreateWFMSJobGridViewObjects(dr);
                dr.Close();

                string insql = "";

                if (jobs != null && jobs.Count > 0)
                    insql = string.Join(",", jobs.Select(x => x.PKID));
                else
                    insql = null;


                //string sql1 = SQLParser.MakeSQL(@"select JobAssignment.*, Name AssignedFFName,Code AssignedFFCode from job, JobAssignment, employees where  job.JobID = JobAssignment.JobID
                //                        and employees.employeeid =JobAssignment.AssignedFFID
                //                         and job.jobid in (%q)
                //                        ", insql);
                string sql1 = SQLParser.MakeSQL(@"select ja.*, e.Name AssignedFFName,e.Code AssignedFFCode from 
                                                  job j Inner Join JobAssignment ja  ON  j.JobID = ja.JobID
                                                  Inner Join employees e ON  e.employeeid =ja.AssignedFFID
                                                  where j.jobid in (%q)", insql);

                dr = new DataReader(tc.ExecuteReader(sql1));
                ObjectsTemplate<JobAssignment> osd = this.CreateJobAssignmentObjects(dr);
                dr.Close();

                //dr = new DataReader(tc.ExecuteReader(@"select jd.* from  JobUpdate jd, 
                //                    ( select JobUpdate.jobid, Max(JobUpdateID) jobupdateid from JobUpdate group by JobUpdate.jobid) mxt
                //                    where mxt.JobUpdateID= jd.JobUpdateID and jd.jobid in (%q)
                //                        ", insql));

                string sql3 = SQLParser.MakeSQL(@"DECLARE @TempTable TABLE(JobID int);
                                                  INSERT INTO @TempTable(JobID)
                                                  SELECT JobID FROM Job j WHERE j.jobid IN(%q)
                                                  SELECT jd.* FROM  JobUpdate jd INNER JOIN
                                                  (SELECT MAX(ju.JobUpdateID) JobUpdateID
                                                  FROM JobUpdate ju
                                                  WHERE ju.JobID IN (SELECT * FROM @TempTable)
                                                  GROUP BY JobID)T ON T.JobUpdateID=jd.JobUpdateID", insql);
                dr = new DataReader(tc.ExecuteReader(sql3));
                ObjectsTemplate<JobUpdate> jobupds = this.CreateJobUpdateObjects(dr);
                dr.Close();

                string sql2 = SQLParser.MakeSQL(@"WITH cte AS
                                                (SELECT j.jobID From job j %q j.CreatedDate < %d and j.status !=%n and j.distributorID in (%q) and j.JobTypeID in (1,2)
                                                                union
                                                                SELECT j.jobID From job j %q j.CreatedDate >= %d  and j.distributorID in (%q) and j.JobTypeID in (1,2)
                                                                union 
                                                                SELECT j.jobID From job j INNER JOIN JobAssignment ja ON ja.JobID=j.JobID
                                                                %q CAST(ja.StatusTime as Date) >= CAST(%d as Date) and status =%n and distributorID in (%q) and JobTypeID in (1,2)
                                                                )
                                                SELECT MAX(cjl.[JobLogID]) [JobLogID], cj.JobID, cj.AssignedFFID,cj.AssignedFromFFID,
                                                cj.CancelTime,cj.Remarks,cj.RemarksID
                                                FROM CanceledJobLog cjl
                                                INNER JOIN CanceledJobLog cj on cj.JobLogID=cjl.JobLogID
                                                WHERE cjl.jobid in (SELECT c.JobID FROM cte c)
                                                AND CAST(cjl.CancelTime as Date) >= CAST(%d as Date)
                                                GROUP BY cj.JobID,cj.AssignedFFID,cj.AssignedFromFFID,
                                                cj.CancelTime,cj.Remarks,cj.RemarksID", sqlClause, fromDate, EnumJobStatus.Completed, distributorId,
                                                                              sqlClause, fromDate, distributorId,
                                                                              sqlClause, fromDate, EnumJobStatus.Completed, distributorId, fromDate);



                dr = new DataReader(tc.ExecuteReader(sql2));
                jobcancelLogs = this.CreateJobCancelObjects(dr);


                dr.Close();
                tc.End();


                foreach (WFMSJob ojob in jobs)
                {
                    foreach (JobAssignment ja in osd)
                    {
                        if (ja.JobID == ojob.PKID)
                        {
                            ojob.AssignedFFID = ja.AssignedFFID;
                            ojob.TeamName = ja.AssignedFFID == 0 ? "N/A" : ja.AssignedFFName;
                            ojob.FromSlot = ja.FromSlot;
                            ojob.ToSlot = ja.ToSlot;
                            ojob.TeamID = ja.AssignedFFID == 0 ? 0 : ja.AssignedFFID;
                            ojob.AssignedTime = ja.AssignedTimeMinValue;
                            ojob.TeamCode = ja.AssignedFFID == 0 ? "N/A" : ja.AssignedFFCode;

                        }
                    }

                    foreach (JobUpdate ja in jobupds)
                    {
                        if (ja.JobID == ojob.PKID)
                        {
                            ojob.Remarks = ja.Remarks;
                        }
                    }

                    foreach (JobCancelLog jcl in jobcancelLogs)
                    {
                        if (jcl.JobID == ojob.PKID)
                        {
                            ojob.CancelRemarksID = jcl.RemarksID;
                            ojob.CancelRemarks = jcl.Remarks;
                            ojob.CancelLogTime = jcl.CancelTime;
                            ojob.PerFormActionByFFID = jcl.PerFormActionByFFID;
                            ojob.CancelTeamName = jcl.CancelTeamName;
                        }
                    }

                }
             
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();
                throw new Exception(e.Message, e);
            }
            return jobs;
        }

        public ObjectsTemplate<Job> GetWFMSJobs(List<JobTypeEnum> jobTypes, EnumJobAssignmentStatus? assignmentStatus, long? branchID, long? assignedFFID, DateTime? issueDate, long distributorID, DateTime? fromDate, DateTime? toDate)
        {
            ObjectsTemplate<Job> jobs;
            string query = string.Empty, subquery = string.Empty;
            TransactionContext tc = null;

            // get all jobs before selected date but not complete
            // get all jobs after selected
            // create a string of jobid from above data
            // get all job updates of selected jobid
            // get all job employee of selected jobid

            try
            {
              
                if (assignedFFID != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("ja.AssignedFFID = %n ", assignedFFID.Value);
                }

                if (assignmentStatus != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("ja.AssignmentStatus = %n ", (int)assignmentStatus.Value);
                }

                if (issueDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.CreatedDate = %d ", issueDate.Value);
                }

                if (fromDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= CAST(%d as Date)", fromDate.Value);
                }

                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.distributorID = %n ", distributorID);

                tc = TransactionContext.Begin(ServiceName);

                DataReader dr = new DataReader(tc.ExecuteReader(@"SELECT j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime,
                                          ja.FromSlot,ja.ToSlot, j.DistributorID , 
                                            CASE j.JobTypeID
                                            WHEN 1 THEN 'New Installation'
                                            WHEN 2 THEN 'Service Request'
                                          ELSE ''
                                          END JobType,
                                          CASE 
                                           WHEN ja.AssignedFFID IS NULL THEN NULL
                                          ELSE emp.EmployeeID
                                           END TeamID,
                                          CASE 
                                           WHEN ja.AssignedFFID IS NULL THEN 'N/A'
                                          ELSE emp.Name
                                           END TeamName,ju.Remarks
                                           From Job j
                                          LEFT JOIN JobAssignment ja ON ja.JobID = j.JobID
                                          LEFT JOIN JobUpdate AS ju ON ju.JobID=j.JobID
                                          LEFT JOIN Employees emp ON emp.EmployeeID = ja.AssignedFFID
                                       %q", subquery));


                jobs = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
            return jobs;
        }

        public ObjectsTemplate<Job> GetAllJobsForWFMSReport(List<JobTypeEnum> jobTypes, EnumJobAssignmentStatus? assignmentStatus, long? branchId, long? assignedFFID, DateTime? issueDate, long distributorID, DateTime? fromDate, DateTime? toDate)
        {
            ObjectsTemplate<Job> jobs;
            string query = string.Empty, subquery = string.Empty;
            TransactionContext tc = null;
            try
            {
              
                if (assignedFFID != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("ja.AssignedFFID = %n ", assignedFFID.Value);
                }

                if (assignmentStatus != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("ja.AssignmentStatus = %n ", (int)assignmentStatus.Value);
                }

                if (issueDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.CreatedDate = %d ", issueDate.Value);
                }

                if (fromDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= CAST(%d as Date)", fromDate.Value);
                }

                if (toDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) <= CAST(%d as Date) ", toDate.Value);
                }
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.ReferenceType= %n", JobReference.SalesInvoice);
                //subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("bp2.BPID= %n", distributorID);
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.distributorID= %n", distributorID);
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("si.invoicestatus != %n AND si.subscriberid IS NOT NULL AND si.challanid IS NULL", InvoiceStatusEnum.FullyReturned);
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("sss.serialstatus=%n", SerialStatusEnum.Sold);

                tc = TransactionContext.Begin(ServiceName);

                DataReader dr = new DataReader(tc.ExecuteReader(@"SELECT distinct j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime,
                                                              ja.FromSlot,ja.ToSlot, j.DistributorID ,sss.SerialNo STBSerial,
                                                                CASE j.JobTypeID
                                                                WHEN 1 THEN 'New Installation'
                                                                WHEN 2 THEN 'Service Request'
                                                              ELSE ''
                                                              END JobType,
                                                              CASE
                                                               WHEN ja.AssignedFFID IS NULL THEN NULL
                                                              ELSE emp.EmployeeID
                                                               END TeamID,
                                                              CASE
                                                               WHEN ja.AssignedFFID IS NULL THEN 'N/A'
                                                              ELSE emp.Name
                                                               END TeamName,ju.Remarks
                                                               From Job j
                                                               inner join SalesInvoice si on si.InvoiceID = j.ReferenceID
                                                               INNER JOIN InvoiceLineItem AS ili ON si.InvoiceID = ili.InvoiceID
                                                               INNER JOIN InvoiceLineItemSerial AS ilis ON si.InvoiceID = ilis.InvoiceID  AND ili.InvoiceLineItemID = ilis.InvoiceLineItemID
                                                               INNER JOIN skubatchstockserial AS sss ON sss.SKUSerialID = ilis.SerialID AND sss.SKUBatchID = ilis.SKUBatchID
                                                               inner JOIN BusinessPartner AS bp1 ON bp1.BPID = si.ShowroomID AND bp1.Category = 8
                                                            -- inner JOIN BusinessPartner bp2 ON bp2.BPID = bp1.ParentID
                                                               inner JOIN BusinessPartner bp2 ON bp2.BPID = j.distributorID 
                                                               LEFT JOIN JobAssignment ja ON ja.JobID = j.JobID
                                                               LEFT JOIN JobUpdate AS ju ON ju.JobID = j.JobID
                                                               LEFT JOIN Employees emp ON emp.EmployeeID = ja.AssignedFFID
                                                               %q", subquery));

                jobs = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
            return jobs;
        }

        public ObjectsTemplate<Job> GetDetialsWFMSJob(DateTime? fromDate, DateTime? toDate)
        {
            ObjectsTemplate<Job> jobs;
            string query = string.Empty, subquery = string.Empty;
            TransactionContext tc = null;
            try
            {
             
                if (fromDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= CAST(%d as Date)", fromDate.Value);
                }

                if (toDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) <= CAST(%d as Date) ", toDate.Value);
                }
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.JobTypeID in (1,2)");
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.ReferenceType= %n", JobReference.SalesInvoice);
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("si.invoicestatus != %n AND si.subscriberid IS NOT NULL AND si.challanid IS NULL", InvoiceStatusEnum.FullyReturned);
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("sss.serialstatus=%n", SerialStatusEnum.Sold);


                tc = TransactionContext.Begin(ServiceName);

                DataReader dr = new DataReader(tc.ExecuteReader(@"SELECT distinct j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime,
                                          ja.FromSlot,ja.ToSlot, j.DistributorID ,sss.SerialNo STBSerial,
                                            CASE j.JobTypeID
                                            WHEN 1 THEN 'New Installation'
                                            WHEN 2 THEN 'Service Request'
                                          ELSE ''
                                          END JobType,
                                          CASE
                                           WHEN ja.AssignedFFID IS NULL THEN NULL
                                          ELSE emp.EmployeeID
                                           END TeamID,
                                          CASE
                                           WHEN ja.AssignedFFID IS NULL THEN 'N/A'
                                          ELSE emp.Name
                                           END TeamName,ju.Remarks
                                           From Job j
                                           inner join SalesInvoice si on si.InvoiceID = j.ReferenceID
                                           INNER JOIN InvoiceLineItem AS ili ON si.InvoiceID = ili.InvoiceID
                                           INNER JOIN InvoiceLineItemSerial AS ilis ON si.InvoiceID = ilis.InvoiceID  AND ili.InvoiceLineItemID = ilis.InvoiceLineItemID
                                           INNER JOIN skubatchstockserial AS sss ON sss.SKUSerialID = ilis.SerialID AND sss.SKUBatchID = ilis.SKUBatchID
                                           inner JOIN BusinessPartner AS bp1 ON bp1.BPID = si.ShowroomID AND bp1.Category = 8
                                           inner JOIN BusinessPartner bp2 ON bp2.BPID = bp1.ParentID
                                           LEFT JOIN JobAssignment ja ON ja.JobID = j.JobID
                                           LEFT JOIN JobUpdate AS ju ON ju.JobID = j.JobID
                                           LEFT JOIN Employees emp ON emp.EmployeeID = ja.AssignedFFID
                                       %q", subquery));
                jobs = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
            return jobs;
        }

        #region LeadManagementReport
        public ObjectsTemplate<RptLeadManagementReport> GetLeadManagementReport(DateTime? fromDate, DateTime? toDate, int jobStatus, CustomerReferenceTypeEnum? customerReferenceType, string customerPhone)
        {
            ObjectsTemplate<RptLeadManagementReport> items;
            try
            {
                var tc = TransactionContext.Begin(ServiceName);
                string sqlClause = string.Empty;

                if (fromDate.HasValue)
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CAST(j.CreatedDate AS DATE) >= %d", fromDate);
                }

                if (toDate.HasValue)
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CAST(j.CreatedDate AS DATE) <= %d", toDate);
                }
                if (jobStatus >= 0)
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.Status = %n", jobStatus);
                }
                if (customerReferenceType > 0)
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.CustomerReferenceType = %n", customerReferenceType);
                }

                if (!string.IsNullOrWhiteSpace(customerPhone))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.CustomerPhone LIKE %s", ("%" + customerPhone + "%"));
                }

                sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.jobTypeID = %n", (short)JobTypeEnum.LeadGeneration);

                var query = SQLParser.MakeSQL(@"SELECT j.JobCode, u.Name EntryUser, j.CreatedDate EntryDateTime, sp.SalesProgramName CampaignName, 
                                            j.CustomerName, j.CustomerPhone, j.CancelReason, bp.Name DistributorName, j.SubscriberId, j.Remarks, 
                                            j.IsPaymentDone, u2.Name RewardGivenUser, j.PaymentConfirmedDate RewardGivenDate,
                                            dt.Name DistrictName, th.Name ThanaName, j.Cpe, j.CustomerReferenceType, j.Status,
	                                            (CASE WHEN j.CustomerReferenceType = %n THEN bp1.Name END) AS ReferenceCustomerName,
	                                            (CASE WHEN j.CustomerReferenceType = %n THEN bp1.OwnerMobile END) AS ReferenceCustomerPhone,
	                                            (CASE WHEN j.CustomerReferenceType = %n THEN si.SubscriberId END) AS ReferrerSubID, 
	                                            (CASE WHEN j.Status = %n THEN j.CreatedDate 
		                                                WHEN j.Status = %n THEN j.ConfirmedDate
		                                                WHEN j.Status = %n THEN j.RejectedDate
		                                            ELSE j.ModifiedDate 
	                                            END
	                                            ) AS StatusChangedDateTime,
	                                            (CASE WHEN j.Status = %n THEN u.Name 
		                                                WHEN j.Status = %n THEN u3.Name
		                                                WHEN j.Status = %n THEN u4.Name
		                                            ELSE u1.Name 
	                                            END
	                                            ) AS ModifierName                                           
                                            FROM Job j
                                            INNER JOIN District dt ON j.DistrictID = dt.DistrictID AND j.jobTypeID = %n
                                            INNER JOIN Thana th ON j.ThanaID = th.ThanaID AND j.jobTypeID = %n
                                            INNER JOIN Users u ON u.UserID = j.CreatedBy AND j.jobTypeID = %n
                                            LEFT JOIN BusinessPartner bp ON bp.BPID = j.DistributorId
                                            LEFT JOIN Sales_Program sp ON sp.SalesprogramID = J.SalesProgramID
                                            LEFT JOIN BusinessPartner bp1 ON bp1.BPID = j.ReferenceCustomerID
                                            LEFT JOIN SalesInvoice si On si.CustomerID = bp1.BPID
                                            LEFT JOIN Users u1 ON u1.UserID = j.ModifiedBy
                                            LEFT JOIN Users u2 ON u2.UserID = j.PaymentConfirmedBy
                                            LEFT JOIN Users u3 ON u3.UserID = j.ConfirmedBy
                                            LEFT JOIN Users u4 ON u4.UserID = j.RejectedBy
                                            %q Order By JobID", CustomerReferenceTypeEnum.Customer, CustomerReferenceTypeEnum.Customer, CustomerReferenceTypeEnum.Customer,
                    EnumJobStatus.Open, EnumJobStatus.SalesConfirm, EnumJobStatus.SalesReject,
                    EnumJobStatus.Open, EnumJobStatus.SalesConfirm, EnumJobStatus.SalesReject,
                    JobTypeEnum.LeadGeneration, JobTypeEnum.LeadGeneration, JobTypeEnum.LeadGeneration, sqlClause);

                items = new ObjectsTemplate<RptLeadManagementReport>();
                DataReader dr = new DataReader(tc.ExecuteReader(query));
                while (dr.Read())
                {
                    RptLeadManagementReport item = new RptLeadManagementReport
                    {
                        JobCode = dr.GetString("JobCode"),
                        EntryUser = dr.GetString("EntryUser"),
                        EntryDateTime = dr.GetDateTime("EntryDateTime").Value,
                        CampaignName = dr.GetString("CampaignName", true, string.Empty),
                        CustomerName = dr.GetString("CustomerName"),
                        CustomerPhone = dr.GetString("CustomerPhone"),
                        DistrictName = dr.GetString("DistrictName"),
                        ThanaName = dr.GetString("ThanaName"),
                        Cpe = (CPEEnum)dr.GetInt16("Cpe", (short)CPEEnum.None),
                        CustomerReferenceType = (CustomerReferenceTypeEnum)dr.GetInt16("CustomerReferenceType").Value,
                        Status = (EnumJobStatus)dr.GetInt16("Status"),
                        ReferenceCustomerName = dr.GetString("ReferenceCustomerName", true, string.Empty),
                        ReferenceCustomerPhone = dr.GetString("ReferenceCustomerPhone", true, string.Empty),
                        ReferrerSubID = dr.GetString("ReferrerSubID", true, string.Empty),
                        StatusChangedDateTime = dr.GetDateTime("StatusChangedDateTime"),
                        ModifierName = dr.GetString("ModifierName", true, string.Empty),
                        CancelOrRejectReason = dr.GetString("CancelReason", true, string.Empty),
                        DistributorName = dr.GetString("DistributorName", true, string.Empty),
                        SubscriberId = dr.GetString("SubscriberId", true, string.Empty),
                        Remarks = dr.GetString("Remarks", true, string.Empty),
                        IsPaymentDone = dr.GetBoolean("IsPaymentDone", true, false),
                        RewardGivenDate = dr.GetDateTime("RewardGivenDate"),
                        RewardGivenUser = dr.GetString("RewardGivenUser", true, string.Empty)
                    };

                    items.Add(item);
                }
                if (items.Count <= 0)
                {
                    items.Add(new RptLeadManagementReport());
                }

                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return items;
        }

        #endregion

        #region GetCorporateSaleJobs
        public ObjectsTemplate<Job> GetCorporateSaleJobs(string fromDate, string toDate, string phoneNo, string serialNo, JobReference referenceType)
        {
            ObjectsTemplate<Job> items;

            try
            {
                var tc = TransactionContext.Begin(ServiceName);
                string sqlClause = string.Empty;

                if (!string.IsNullOrEmpty(fromDate))
                {
                    var fromdate = DateTime.Parse(fromDate, new CultureInfo("en-US", true));
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= %d", fromdate);
                }
                if (!string.IsNullOrEmpty(toDate))
                {
                    var todate = DateTime.Parse(toDate, new CultureInfo("en-US", true));
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) <= %d", todate);
                }

                if (!string.IsNullOrWhiteSpace(phoneNo))
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.CustomerPhone LIKE %s", ("%" + phoneNo + "%"));

                if (!string.IsNullOrWhiteSpace(serialNo))
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.STBnumber LIKE %s", ("%" + serialNo + "%"));


                sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.ReferenceType = %n ", (int)referenceType);

                string sql = SQLParser.MakeSQL(@"SELECT j.*
                                                FROM Job j
                                                %q", sqlClause);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }

            return items;
        }

        #endregion

        public ObjectsTemplate<Job> GetSubcriberIdFromJob(string jobTypeIds, string fromDate, string subcriberId, string mobileNo)
        {
            ObjectsTemplate<Job> items;

            try
            {
                var tc = TransactionContext.Begin(ServiceName);
                string sqlClause = string.Empty;

                if (!string.IsNullOrWhiteSpace(jobTypeIds))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.JobTypeID IN(SELECT * FROM dbo.STRING_TO_INT(%s))", jobTypeIds);
                }
                if (!string.IsNullOrEmpty(fromDate))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CAST(j.IssueDate as Date) >= %d", fromDate);
                }
                if (!string.IsNullOrWhiteSpace(subcriberId))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.SubscriberId LIKE %s", ("%" + subcriberId + "%"));
                }
                if (!string.IsNullOrWhiteSpace(mobileNo))
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.CustomerPhone = %s", mobileNo);

                }
                sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.IsSubscriberIdInLead IS NULL AND j.SubscriberId IS NOT NULL AND datalength(j.SubscriberId)>0");

                string sql = SQLParser.MakeSQL(@"SELECT j.* FROM Job j %q", sqlClause);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }

            return items;
        }


        public ObjectsTemplate<Job> GetJobsForVariousSystemReport(string distributorID, long? divisionID, DateTime? fromDate, DateTime? toDate, string subscriberId)
        {
            ObjectsTemplate<JobUpdateReport> jobUpdateReports = new ObjectsTemplate<JobUpdateReport>();
            ObjectsTemplate<Job> jobs;
            string subquery = string.Empty;
            TransactionContext tc = null;
            try
            {
           
                if (fromDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= CAST(%d as Date)", fromDate.Value);
                }

                if (toDate != null)
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) <= CAST(%d as Date)", toDate.Value);
                }

                if (!string.IsNullOrEmpty(distributorID))
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.distributorID in (%q)", distributorID);

                if (divisionID != null && divisionID > 0)
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("dv.DivisionID = %n", divisionID);

                if (!string.IsNullOrWhiteSpace(subscriberId))
                {
                    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.SubscriberId LIKE %s", ("%" + subscriberId + "%"));
                }

                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.[Status]<>%n", (int)EnumJobStatus.Open);
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.JobTypeID in (1,2)");
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.jobId NOT IN (SELECT j.Jobid FROM JOB j WHERE j.[Status]=1 and j.JobID NOT IN (SELECT distinct ja.JobID FROM JobAssignment AS ja))");//Jobs that are not present at jobassigned table but in assigned status
                subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.jobId NOT IN (SELECT j.Jobid FROM JOB j WHERE j.[Status]=17)");

                tc = TransactionContext.Begin(ServiceName);

                DataReader dr = new DataReader(tc.ExecuteReader(@"SELECT distinct j.*,t.Name ThanaName,d.Name DistrictName,dv.Code DivisionName,j.status,bp.Name CustomerName,
                                                                  bp.OwnerMobile CustomerPhone,j.HouseNo,j.Landmark,j.RoadNo,bp1.Name DistributorName
                                                                  FROM JOB j
                                                                  LEFT JOIN Thana AS t ON t.ThanaID=j.ThanaID
                                                                  LEFT JOIN District AS d ON d.DistrictID=j.DistrictID
                                                                  LEFT JOIN Division AS dv ON d.DivisionID=dv.DivisionID
                                                                  LEFT JOIN BusinessPartner AS bp ON bp.BPID = j.CustomerID
                                                                  LEFT JOIN BusinessPartner AS bp1 ON bp1.BPID = j.distributorID
                                                                   %q", subquery));

                jobs = CreateJobObjects(dr);
                dr.Close();

                string insql = "";

                if (jobs != null && jobs.Count > 0)
                    insql = string.Join(",", jobs.Select(x => x.PKID));
                else
                    insql = null;

                var cancelRemarkIds = SystemConstants.CANCEL_NLOS + "," + SystemConstants.CANCEL_NO_PERMISSION + "," + SystemConstants.CANCEL_WRONG_COMMITMENT;
                var rescheduleRemarkIds = SystemConstants.RESCHEDULE_CUSTOMER_ISSUE + "," + SystemConstants.RESCHEDULE_SCHEDULE_POWERCUT;
                var unscheduleRemarkIds = SystemConstants.UNSCHEDULE_HOUSE_SHIFT + "," + SystemConstants.UNSCHEDULE_ABROAD + "," + SystemConstants.UNSCHEDULE_RMN + "," + SystemConstants.UNSCHEDULE_TVPROBLEM;
                var reAssignIds = SystemConstants.REASSIGN_EXISTING_JOB + "," + SystemConstants.REASSIGN_PERSONAL_ISSUE;

                dr = new DataReader(tc.ExecuteReader(@"SELECT ja.*,e.Name AssignedFFName FROM JobAssignment ja
                                                       INNER JOIN JOB j ON j.JobID=ja.JobID
                                                       LEFT JOIN Employees e ON e.EmployeeID=ja.AssignedFFID 
                                                       and j.jobid in (%q)", insql));
                ObjectsTemplate<JobAssignment> osd = CreateJobAssignmentObjects(dr);
                dr.Close();

                string sql = SQLParser.MakeSQL(@"SELECT j.JobID,MAX(Ju.Remarks) AS FirstCall,MAX(ju.UpdateTime) FCTime,MAX(ju.Location) FCLocation, MAX(ju1.Remarks) AS Accept,
                                        MAX(ju1.UpdateTime) AcceptTime,MAX(ju1.Location) AcceptLocation,
                                        MAX(ju2.Remarks) AS SecondCall,
                                        MAX(ju2.UpdateTime) SecondCallTime,MAX(ju2.Location) SecondCallLocation,
                                        MAX(ju3.Remarks) AS Visit,
                                        MAX(ju3.UpdateTime) VisitTime,MAX(ju3.Location) VisitLocation,
                                        MAX(ju4.Remarks) AS Wip,
                                        MAX(ju4.UpdateTime) WipTime,MAX(ju4.Location) WipLocation,
                                        MAX(ju5.Remarks) AS JobDone,
                                        MAX(ju5.UpdateTime) JobDoneTime,MAX(ju5.Location) JobDoneLocation,
                                        MAX(ju6.Remarks) AS Cancel,
                                        MAX(ju6.UpdateTime) CancelTime,MAX(ju6.Location) CancelLocation,
                                        MAX(ju7.Remarks) AS Reshedule,
                                        MAX(ju7.UpdateTime) ResheduleTime,MAX(ju7.Location) ResheduleLocation,
                                        MAX(ju8.Remarks) AS Unshedule,
                                        MAX(ju8.UpdateTime) UnsheduleTime,MAX(ju8.Location) UnsheduleLocation,
                                        MAX(ju9.Remarks) AS ReAssign,
                                        MAX(ju9.UpdateTime) ReAssignTime,MAX(ju9.Location) ReAssignLocation,
                                        MAX(ju10.Remarks) AS QRCode,
                                        MAX(ju10.UpdateTime) QRCodeTime,MAX(ju10.Location) QRCodeLocation,
                                        MAX(ju11.Remarks) AS ResolvedOverPhone,
                                        MAX(ju11.UpdateTime) ResolvedOverPhoneTime,MAX(ju11.Location) ResolvedOverPhoneLocation

                                          FROM JOB j
                                            LEFT JOIN jobUpdate ju ON j.JobID=ju.JobID AND ju.RemarksID=%n AND j.jobID in (%q)
                                            LEFT JOIN jobUpdate ju1 ON j.JobID=ju1.JobID AND ju1.RemarksID=%n AND j.jobID in (%q)
                                            LEFT JOIN jobUpdate ju2 ON j.JobID=ju2.JobID AND ju2.RemarksID=%n AND j.jobID in (%q)
                                            LEFT JOIN jobUpdate ju3 ON j.JobID=ju3.JobID AND ju3.RemarksID=%n AND j.jobID in (%q)
                                            LEFT JOIN jobUpdate ju4 ON j.JobID=ju4.JobID AND ju4.RemarksID=%n AND j.jobID in (%q)
                                            LEFT JOIN jobUpdate ju5 ON j.JobID=ju5.JobID AND ju5.RemarksID=%n AND j.jobID in (%q)
                                            LEFT JOIN jobUpdate ju6 ON j.JobID=ju6.JobID AND ju6.RemarksID in (%q) AND j.jobID in (%q)
                                            LEFT JOIN jobUpdate ju7 ON j.JobID=ju7.JobID AND ju7.RemarksID in (%q) AND j.jobID in (%q)
                                            LEFT JOIN jobUpdate ju8 ON j.JobID=ju8.JobID AND ju8.RemarksID in (%q) AND j.jobID in (%q) 
                                            LEFT JOIN jobUpdate ju9 ON j.JobID=ju9.JobID AND ju9.RemarksID in (%q) AND j.jobID in (%q) 
                                            LEFT JOIN jobUpdate ju10 ON j.JobID=ju10.JobID AND ju10.RemarksID =%n AND j.jobID in (%q) 
                                            LEFT JOIN jobUpdate ju11 ON j.JobID=ju11.JobID AND ju11.RemarksID =%n AND j.jobID in (%q) 
                                        WHERE j.jobID in (%q)
                                        GROUP BY j.jobID", SystemConstants.FIRST_CALL_TO_CUSTOMER, insql,
                                                           SystemConstants.ACCEPT, insql,
                                                           SystemConstants.SECOND_CALL_TO_CUSTOMER_BEFORE_VISIT, insql,
                                                           SystemConstants.CHECK_IN_AFTER_ARRIVAL, insql,
                                                           SystemConstants.WORK_IN_PROGRESS, insql,
                                                           SystemConstants.JOB_DONE, insql,
                                                           cancelRemarkIds, insql,
                                                           rescheduleRemarkIds, insql,
                                                           unscheduleRemarkIds, insql,
                                                           reAssignIds, insql,
                                                           SystemConstants.QR_CODE, insql,
                                                           SystemConstants.RESOLVED_OVER_PHONE, insql,
                                                           insql);

                dr = new DataReader(tc.ExecuteReader(sql));

                while (dr.Read())
                {
                    JobUpdateReport titem = new JobUpdateReport();
                    titem.JobID = dr.GetInt64("JobID").Value;
                    titem.FirstCallTime = dr.GetDateTime("FCTime", true, DateTime.MinValue);
                    titem.FirstCall = dr.GetString("FirstCall", true, null);
                    titem.FirstCallLcation = dr.GetString("FCLocation", true, null);

                    titem.AcceptTime = dr.GetDateTime("AcceptTime", true, DateTime.MinValue);
                    titem.Accept = dr.GetString("Accept", true, null);
                    titem.AcceptLocation = dr.GetString("AcceptLocation", true, null);

                    titem.SecondCallTime = dr.GetDateTime("SecondCallTime", true, DateTime.MinValue);
                    titem.SecondCall = dr.GetString("SecondCall", true, null);
                    titem.SecondCallLcation = dr.GetString("SecondCallLcation", true, null);

                    titem.VisitTime = dr.GetDateTime("VisitTime", true, DateTime.MinValue);
                    titem.Visit = dr.GetString("Visit", true, null);
                    titem.VisitLocation = dr.GetString("VisitLocation", true, null);

                    titem.WIPTime = dr.GetDateTime("WipTime", true, DateTime.MinValue);
                    titem.WIP = dr.GetString("Wip", true, null);
                    titem.WIPLocation = dr.GetString("WipLocation", true, null);

                    titem.CompleteTime = dr.GetDateTime("JobDoneTime", true, DateTime.MinValue);
                    titem.Complete = dr.GetString("JobDone", true, null);
                    titem.CompleteLocation = dr.GetString("JobDoneLocation", true, null);

                    titem.CancelTime = dr.GetDateTime("CancelTime", true, DateTime.MinValue);
                    titem.Cancel = dr.GetString("Cancel", true, null);
                    titem.CancelLocation = dr.GetString("CancelLocation", true, null);

                    titem.RescheduleTime = dr.GetDateTime("ResheduleTime", true, DateTime.MinValue);
                    titem.Reschedule = dr.GetString("Reshedule", true, null);
                    titem.RescheduleLocation = dr.GetString("ResheduleLocation", true, null);

                    titem.UnscheduleTime = dr.GetDateTime("UnsheduleTime", true, DateTime.MinValue);
                    titem.Unschedule = dr.GetString("Unshedule", true, null);
                    titem.UnscheduleLocation = dr.GetString("UnsheduleLocation", true, null);

                    titem.ReAssignTime = dr.GetDateTime("ReAssignTime", true, DateTime.MinValue);
                    titem.ReAssign = dr.GetString("ReAssign", true, null);
                    titem.ReAssignLocation = dr.GetString("ReAssignLocation", true, null);

                    titem.QRCodeTime = dr.GetDateTime("QRCodeTime", true, DateTime.MinValue);
                    titem.QRCode = dr.GetString("QRCode", true, null);
                    titem.QRCodeLocation = dr.GetString("QRCodeLocation", true, null);

                    titem.ResolvedOverPhoneTime = dr.GetDateTime("ResolvedOverPhoneTime", true, DateTime.MinValue);
                    titem.ResolvedOverPhone = dr.GetString("ResolvedOverPhone", true, null);
                    titem.ResolvedOverPhoneLocation = dr.GetString("ResolvedOverPhoneLocation", true, null);

                    jobUpdateReports.Add(titem);
                }
                if (jobUpdateReports.Count <= 0)
                {
                    jobUpdateReports.Add(new JobUpdateReport());
                }

                dr.Close();
                tc.End();

                foreach (Job ojob in jobs)
                {
                    foreach (JobAssignment ja in osd)
                    {
                        if (ja.JobID == ojob.PKID)
                        {
                            ojob.AssignedFFID = ja.AssignedFFID;
                            ojob.TeamName = ja.AssignedFFName;
                            ojob.AssignedTime = ja.AssignedTime == DateTime.MinValue ? (DateTime?)null : ja.AssignedTime;
                        }
                    }

                    foreach (JobUpdateReport jur in jobUpdateReports)
                    {
                        if (jur.JobID == ojob.PKID)
                        {
                            ojob.FirstCall = jur.FirstCall;
                            ojob.FirstCallLcation = jur.FirstCallLcation;
                            ojob.FirstCallTime = jur.FirstCallTime;

                            if (ojob.StartDateTime != null && ojob.StartDateTime != DateTime.MinValue)
                            {
                                if (jur.FirstCallTime != null && ojob.FirstCallTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.FirstCallTime - (DateTime)ojob.StartDateTime;
                                    // ojob.FirstCallDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.FirstCallDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }
                            }

                            ojob.Accept = jur.Accept;
                            ojob.AcceptLocation = jur.AcceptLocation;
                            ojob.AcceptTime = jur.AcceptTime;

                            if (jur.FirstCallTime != null && jur.FirstCallTime != DateTime.MinValue)
                            {
                                if (jur.AcceptTime != null && jur.AcceptTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.AcceptTime - (DateTime)jur.FirstCallTime;
                                    //  ojob.AcceptDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.AcceptDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }
                            }

                            ojob.SecondCall = jur.SecondCall;
                            ojob.SecondCallLcation = jur.SecondCallLcation;
                            ojob.SecondCallTime = jur.SecondCallTime;

                            if (jur.FirstCallTime != null && jur.FirstCallTime != DateTime.MinValue)
                            {
                                if (jur.SecondCallTime != null && jur.SecondCallTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.SecondCallTime - (DateTime)jur.FirstCallTime;
                                    //ojob.SecondCallDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.SecondCallDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }
                            }

                            ojob.Visit = jur.Visit;
                            ojob.VisitLocation = jur.VisitLocation;
                            ojob.VisitTime = jur.VisitTime;

                            if (jur.SecondCallTime != null && jur.SecondCallTime != DateTime.MinValue)
                            {
                                if (jur.VisitTime != null && jur.VisitTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.VisitTime - (DateTime)jur.SecondCallTime;
                                    // ojob.VisitDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.VisitDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }
                            }


                            ojob.WIP = jur.WIP;
                            ojob.WIPLocation = jur.WIPLocation;
                            ojob.WIPTime = jur.WIPTime;

                            if (jur.VisitTime != null && jur.VisitTime != DateTime.MinValue)
                            {
                                if (jur.WIPTime != null && jur.WIPTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.WIPTime - (DateTime)jur.VisitTime;
                                    // ojob.WIPDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.WIPDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }
                            }

                            ojob.Complete = jur.Complete;
                            ojob.CompleteLocation = jur.CompleteLocation;
                            ojob.CompleteTime = jur.CompleteTime;

                            if (ojob.StartDateTime != null && ojob.StartDateTime != DateTime.MinValue)
                            {
                                if (jur.CompleteTime != null && jur.CompleteTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.CompleteTime - (DateTime)ojob.StartDateTime;
                                    // ojob.CompleteDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.CompleteDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }
                            }



                            ojob.Cancel = jur.Cancel;
                            ojob.CancelLocation = jur.CancelLocation;
                            ojob.CancelTime = jur.CancelTime;

                            if (ojob.StartDateTime != null && ojob.StartDateTime != DateTime.MinValue)
                            {
                                if (jur.CancelTime != null && jur.CancelTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.CancelTime - (DateTime)ojob.StartDateTime;
                                    // ojob.CancelDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.CancelDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }

                            }

                            ojob.Reschedule = jur.Reschedule;
                            ojob.RescheduleLocation = jur.RescheduleLocation;
                            ojob.RescheduleTime = jur.RescheduleTime;

                            if (ojob.StartDateTime != null && ojob.StartDateTime != DateTime.MinValue)
                            {
                                if (jur.RescheduleTime != null && jur.RescheduleTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.RescheduleTime - (DateTime)ojob.StartDateTime;
                                    // ojob.RescheduleDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.RescheduleDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }

                            }

                            ojob.Unschedule = jur.Unschedule;
                            ojob.UnscheduleLocation = jur.UnscheduleLocation;
                            ojob.UnscheduleTime = jur.UnscheduleTime;

                            if (ojob.StartDateTime != null && ojob.StartDateTime != DateTime.MinValue)
                            {
                                if (jur.UnscheduleTime != null && jur.UnscheduleTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.UnscheduleTime - (DateTime)ojob.StartDateTime;
                                    //ojob.UnscheduleDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.UnscheduleDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }

                            }

                            ojob.ReAssign = jur.ReAssign;
                            ojob.ReAssignLocation = jur.ReAssignLocation;
                            ojob.ReAssignTime = jur.ReAssignTime;

                            if (ojob.StartDateTime != null && ojob.StartDateTime != DateTime.MinValue)
                            {
                                if (jur.ReAssignTime != null && jur.ReAssignTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.ReAssignTime - (DateTime)ojob.StartDateTime;
                                    //ojob.UnscheduleDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.ReAssignDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }

                            }

                            ojob.QRCode = jur.QRCode;
                            ojob.QRCodeLocation = jur.QRCodeLocation;
                            ojob.QRCodeTime = jur.QRCodeTime;

                            if (ojob.StartDateTime != null && ojob.StartDateTime != DateTime.MinValue)
                            {
                                if (jur.QRCodeTime != null && jur.QRCodeTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.QRCodeTime - (DateTime)ojob.StartDateTime;
                                    //ojob.UnscheduleDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.QRCodeDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }

                            }

                            ojob.ResolvedOverPhone = jur.ResolvedOverPhone;
                            ojob.ResolvedOverPhoneLocation = jur.ResolvedOverPhoneLocation;
                            ojob.ResolvedOverPhoneTime = jur.ResolvedOverPhoneTime;

                            if (ojob.StartDateTime != null && ojob.StartDateTime != DateTime.MinValue)
                            {
                                if (jur.ResolvedOverPhoneTime != null && jur.ResolvedOverPhoneTime != DateTime.MinValue)
                                {
                                    TimeSpan diff = (DateTime)jur.ResolvedOverPhoneTime - (DateTime)ojob.StartDateTime;
                                    //ojob.UnscheduleDuration = (diff.Hours + ":" + diff.Minutes + ":" + diff.Seconds);
                                    ojob.ResolvedOverPhoneDuration = (diff.Days + "d:" + diff.Hours + "h:" + diff.Minutes + "m:" + diff.Seconds + "s");
                                }

                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
            return jobs;
        }


        public ObjectsTemplate<Job> GetLeadGenerationJobsByUserId(string fromDate, string toDate, string phoneNo, JobTypeEnum JobTypeID, LeadGenerationTypeEnum leadgenerationType, List<EnumJobStatus> status, long? userId, long empId, long? bpId)
        {
            ObjectsTemplate<Job> items;
            BusinessPartnerDA businessPartnerDA = new BusinessPartnerDA();
            Employee tempEmployee = new Employee();
            try
            {
                var tc = TransactionContext.Begin(ServiceName);
                string sqlClause = string.Empty;
                string sql = string.Empty;

                if (userId != null)
                {
                    tempEmployee = new EmployeeDA().GetById(tc, empId, true);
                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    var fromdate = DateTime.Parse(fromDate, new CultureInfo("en-US", true));
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= %d", fromdate);
                }
                if (!string.IsNullOrEmpty(toDate))
                {
                    var todate = DateTime.Parse(toDate, new CultureInfo("en-US", true));
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) <= %d", todate);
                }

                if (!string.IsNullOrWhiteSpace(phoneNo))
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.CustomerPhone LIKE %s", ("%" + phoneNo + "%"));

                if (bpId != null)
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.DistributorID = %n", bpId);

                if (status != null)
                {

                    if ((userId == null) || (userId != null && tempEmployee.DistributorID > 0))
                    {
                        sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.Status IN (%q)", string.Join(",", status.Select(x => (int)x)));
                    }
                    else
                    {
                        if (status != null)
                            sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.Status IN (%q)", string.Join(",", status.Select(x => (int)x)));
                        else

                            sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.Status IN (%n, %n, %n, %n)",
                                EnumJobStatus.ForwardToDistributor, EnumJobStatus.ForwardToCorporate, EnumJobStatus.SalesConfirm, EnumJobStatus.SalesReject);
                    }
                }

                if (tempEmployee.DistributorID > 0 && userId != null)
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.DistributorID In(SELECT ISNull(em.DistributorId, 0) FROM Users u INNER JOIN Employees em ON u.EmployeeID = em.EmployeeID AND u.UserID =%n)", userId);
                }

                sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.JobTypeID =%n", JobTypeID);

                sql = SQLParser.MakeSQL(@"SELECT j.JobID, j.JobTypeID,j.JobCode,j.IssueDate,j.EntryDateTime,j.Status,j.FirstName,j.LastName, j.CreatedBy,j.CreatedDate,j.ModifiedBy,j.ModifiedDate,
                                            j.Remarks, j.CancelReason, j.Gender,j.Landmark, j.HouseNo, j.RoadNo, j.Cpe, j.CustomerNID, j.CustomerDOB, j.CustomerName, j.CustomerPhone,
                                            j.SubscriberId, j.IsSubscriberIdInLead, j.SalesProgramID, j.IsPaymentDone,
                                            j.DistributorID, j.ThanaID, j.DistrictID, j.CustomerReferenceType, j.ReferenceCustomerID,
                                            th.Name ThanaName, dt.Name DistrictName, bp.Name DistributorName, u.Name CreatorName, sp.SalesProgramName,
                                            (CASE WHEN j.CustomerReferenceType = %n THEN bp1.Name END) AS ReferenceCustomerName,
                                            (CASE WHEN j.CustomerReferenceType = %n THEN si.SubscriberId END) AS ReferrerSubID,
                                            ('Road: ' + isnull(j.RoadNo, '') + ', ' + 'House: ' + isnull(j.HouseNo,'') + ', ' + 'Landmark: ' +  isnull(j.Landmark,'')) AS FullAddress
                                            FROM Job j
                                            INNER JOIN District dt ON j.DistrictID = dt.DistrictID AND j.jobTypeID = %n
                                            INNER JOIN Thana th ON j.ThanaID = th.ThanaID AND j.jobTypeID = %n
                                            INNER JOIN Users u ON U.UserID = j.CreatedBy AND j.jobTypeID = %n
                                            LEFT JOIN BusinessPartner bp ON bp.BPID = j.DistributorId
                                            LEFT JOIN Sales_Program sp ON sp.SalesprogramID = J.SalesProgramID
                                            LEFT JOIN BusinessPartner bp1 ON bp1.BPID = j.ReferenceCustomerID
                                            LEFT JOIN SalesInvoice si On si.CustomerID = bp1.BPID
                                            %q ORDER BY j.JobID DESC", CustomerReferenceTypeEnum.Customer, CustomerReferenceTypeEnum.Customer,
                                            JobTypeID, JobTypeID, JobTypeID, sqlClause);


                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateLeadGenerationObjects(dr);

                if ((items.Count > 0) && (leadgenerationType == LeadGenerationTypeEnum.AssignLeadGeneration))
                {

                    foreach (Job item in items.ToList())
                    {
                        if (item.Status == EnumJobStatus.ForwardToSales)
                            item.BusinessPartners = businessPartnerDA.GetDistributorByDistrictID(item.DistrictId);
                    }
                }

                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }

            return items;
        }

        public ObjectsTemplate<LeadGenerationDashBoard> GetLeadGenerationDashBoardByUserId(List<EnumJobStatus> status)
        {
            ObjectsTemplate<LeadGenerationDashBoard> items;

            try
            {
                var tc = TransactionContext.Begin(ServiceName);
                string sqlClause = string.Empty;

                if (status != null)
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.Status IN (%q)", string.Join(",", status.Select(x => (int)x)));
                }
                sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.JobTypeID = %n", (short)JobTypeEnum.LeadGeneration);

                string sql = SQLParser.MakeSQL(@"SELECT j.Status, COUNT(j.Status) AS NumberOfItem FROM Job j
                                                 %q GROUP BY j.Status", sqlClause);

                items = new ObjectsTemplate<LeadGenerationDashBoard>();
                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                while (dr.Read())
                {
                    LeadGenerationDashBoard item = new LeadGenerationDashBoard();
                    item.Status = (EnumJobStatus)dr.GetInt16("Status").Value;
                    item.NumberOfItem = dr.GetDecimal("NumberOfItem", true, 0);

                    items.Add(item);
                }
                if (items.Count <= 0)
                {
                    items.Add(new LeadGenerationDashBoard());
                }
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }

            return items;
        }

        public ObjectsTemplate<JobStatusCount> GetJobStatusCount(string distributorID, DateTime? fromDate)
        {
            ObjectsTemplate<JobStatusCount> items;

            try
            {
                var tc = TransactionContext.Begin(ServiceName);
                string sqlClause = string.Empty;

                if (fromDate != null)
                {
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= CAST(%d as Date)", fromDate.Value);
                }

                string sql = SQLParser.MakeSQL(@"SELECT T.[Status], COUNT(T.JobID) JobCount,
                                                                            CASE [Status]
                                                                                WHEN 0 THEN 'Open' 
                                                                                WHEN 1 THEN 'Assinged'
                                                                                WHEN 2 THEN 'Received'
                                                                                WHEN 3 THEN 'Rejected'
                                                                                WHEN 4 THEN 'Completed'
                                                                                WHEN 10 THEN 'Reschedule'
                                                                                WHEN 17 THEN 'Request_Re_Assign'
                                                                                WHEN 18 THEN 'UnSchedule'
                                                                                WHEN 20 THEN 'Cancel'
                                                                              END AS StatusRemark
                                                                              From
                                                                (select *From Job Where CreatedDate < %d and distributorID in (%q) and JobTypeID in (1,2)
                                                                union
                                                                select *From Job Where CreatedDate > %d  and distributorID in (%q) and JobTypeID in (1,2))T GROUP BY T.[Status]", fromDate, distributorID,
                                                                              fromDate, distributorID);

                items = new ObjectsTemplate<JobStatusCount>();
                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                while (dr.Read())
                {
                    JobStatusCount item = new JobStatusCount();
                    item.Status = (int)dr.GetInt16("Status", true, 0);
                    item.JobCount = dr.GetInt64("JobCount", true, 0);
                    item.StatusRemark = dr.GetString("StatusRemark", string.Empty);
                    items.Add(item);
                }
                if (items.Count <= 0)
                {
                    items.Add(new JobStatusCount());
                }

                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }

            return items;
        }

        public ObjectsTemplate<JobUpdate> GetJobRemarks(long JobId)
        {
            TransactionContext tc = null;
            ObjectsTemplate<JobUpdate> items;

            try
            {
                tc = TransactionContext.Begin(ServiceName);
                string sql = SQLParser.MakeSQL(@"SELECT j.*, emp.Name FROM JobUpdate j inner join Employees emp  on j.UpdateByFFID = emp.EmployeeID WHERE JobID = %n", JobId);


                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobUpdateObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return items;
        }

        public System.Data.DataSet GetFieldForceSummary(long userID, long branchID)
        {
            ObjectsTemplate<Job> CurrentBranchJobs = new JobDA().GetJobsByBranch(branchID).Where(x => x.JobTypeID == JobTypeEnum.NIR || x.JobTypeID == JobTypeEnum.SR).OrderBy(x => x.AssignedFFID).ToObjectsTemplate();
            DataTable dTable = new DataTable();
            System.Data.DataSet dSet = new System.Data.DataSet();
            try
            {
                dTable.Columns.Add("FFID", typeof(long));
                dTable.Columns.Add("FFName", typeof(string));
                dTable.Columns.Add("PickupAssigned", typeof(string));
                dTable.Columns.Add("PickupReceived", typeof(string));
                dTable.Columns.Add("PickupCompleted", typeof(string));
                dTable.Columns.Add("DeliveryPending", typeof(string));
                dTable.Columns.Add("DeliveryCompleted", typeof(string));
                dTable.Columns.Add("LastLocation", typeof(string));
                DataRow dRow = null;
                dSet.Tables.Add(dTable);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return dSet;
        }

        public Job GetJobByID(long jobId)
        {
            Job item = null;
            var tc = TransactionContext.Begin(ServiceName);
            try
            {
                string sql = SQLParser.MakeSQL(@"SELECT j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime " +
                                                "From (SELECT * FROM Job WHERE JobID = %n) j " +
                                                "LEFT JOIN JobAssignment ja " +
                                                "ON j.JobID = ja.JobID", jobId);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                if (dr.Read())
                    item = CreateJobObject(dr);
                dr.Close();

                if (item != null)
                {
                    sql = SQLParser.MakeSQL("SELECT * FROM JobAssignment WHERE JobID = %n", jobId);
                    dr = new DataReader(tc.ExecuteReader(sql));
                    if (dr.Read())
                    {
                        item.JobAssignment = CreateJobAssignmentObject(dr);
                    }
                    dr.Close();

                    sql = SQLParser.MakeSQL("SELECT * FROM JobUpdate WHERE JobID = %n", jobId);
                    dr = new DataReader(tc.ExecuteReader(sql));
                    item.JobUpdates = CreateJobUpdateObjects(dr);
                    dr.Close();
                }

                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return item;
        }

        public Job GetJobByAssignedConsignmentItemNo(JobTypeEnum? jobTypeID, EnumJobAssignmentStatus assignmentStatus, long? consignmentID, string consignmentItemNo)
        {
            Job item = null;
            TransactionContext tc = null;
            try
            {
                string whereCaluse = string.Empty;
                if (jobTypeID != null)
                {
                    whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("JobTypeID = %n ", (int)jobTypeID.Value);
                }
                if (consignmentID != null)
                {
                    whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("ConsignmentID = %n ", consignmentID.Value);
                }


                string sql = SQLParser.MakeSQL(@"SELECT j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime,ci.UnitNo ConsignmentItemNo " +
                                                "From (SELECT * FROM Job %q) j " +
                                                "INNER JOIN JobAssignment ja " +
                                                "ON j.JobID = ja.JobID AND ja.AssignmentStatus = %n " +
                                                "INNER JOIN ConsignmentItem ci " +
                                                "ON j.ConsignmentItemID = ci.ConsignmentItemID AND ci.UnitNo = %s"
                                                , whereCaluse, (int)assignmentStatus, consignmentItemNo.Trim());
                tc = TransactionContext.Begin(ServiceName);
                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                if (dr.Read())
                {
                    item = CreateJobObject(dr);
                }
                dr.Close();
                tc.End();

                return item;
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

        }
        public System.Data.DataSet GetDeliverableConsignmentItems(string consignmentItemIDs, int? branchId, string consignmentItemUnitNo, long? assignedFFID)
        {
            var tc = TransactionContext.Begin(ServiceName);
            StringBuilder sbQuery = new StringBuilder();
            EnumConsignmentItemStatus conItemStatus = EnumConsignmentItemStatus.Delivery_Runsheet;
            try
            {
                if (assignedFFID != null)
                {
                    conItemStatus = EnumConsignmentItemStatus.Delivery_Runsheet_Assigned;
                }
                sbQuery.Append(string.IsNullOrWhiteSpace(consignmentItemIDs) ? string.Empty : SQLParser.MakeSQL(" And conI.ConsignmentItemID in (%q) ", consignmentItemIDs));
                sbQuery.Append(string.IsNullOrWhiteSpace(consignmentItemUnitNo) ? string.Empty : SQLParser.MakeSQL(" And conI.UnitNo = %s ", consignmentItemUnitNo));
                sbQuery.Append(branchId == null || branchId.Value <= 0 ? string.Empty : SQLParser.MakeSQL(" And conI.BranchId = %n ", branchId));
                sbQuery.Append(assignedFFID == null ? string.Empty : SQLParser.MakeSQL(" AND ja.AssignedFFID = %n ", assignedFFID));
                string sql = SQLParser.MakeSQL(@"SELECT conI.ConsignmentItemID, conI.UnitNo, cons.ConsignmentID, cons.ConsignmentNo, cons.ConsignmentDate, conI.BranchId,
                            cons.SenderID,
                            --CASE custS.CustomerCode WHEN '999' THEN cons.SenderName ELSE custS.Name END Sender,
                            --CASE custS.CustomerCode WHEN '999' THEN cons.SenderTelNo2 ELSE custS.PhoneNo END SenderPhone, 
                            cons.SenderName Sender,cons.SenderTelNo1  SenderPhone,
                            cons.ReceiverID,
                            cons.ReceiverName Receiver, cons.ReceiverTelNo1 ReceiverPhone, 
                            --custR.Name Receiver, custR.PhoneNo ReceiverPhone, 
                            cons.DeliveryAddress1 + ' ' + IsNULL(dCity.Name,'') + ' ' + IsNULL(dCountry.Name,'') + ' ' + IsNULL(postCode.Code,'') DeliveryAddress
                             FROM ConsignmentItem conI
                            LEFT JOIN Consignments cons ON cons.ConsignmentID = conI.ConsignmentID
                            LEFT JOIN Customer custS ON cons.SenderID = custS.CustomerId
                            LEFT JOIN Customer custR ON cons.ReceiverID = custR.CustomerId 
                            LEFT JOIN City dCity ON cons.DeliveryCityId = dCity.CityID
                            LEFT JOIN Countries dCountry ON cons.DeliveryCountryId = dCountry.CountryID
                            LEFT JOIN PostalCode postCode ON cons.DeliveryPostCodeId = postCode.PostalCodeID
                            LEFT JOIN Job j ON j.ConsignmentItemID = conI.ConsignmentItemID
                            LEFT JOIN JobAssignment ja ON j.JobID = ja.JobID
                            WHERE conI.Status = %n %q", (int)conItemStatus, sbQuery.ToString());
                var ds = tc.ExecuteDataSet(sql);
                tc.End();
                return ds;
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
        }
        public JobConcernType GetJobConcernTypeByID(long employeeId)
        {
            JobConcernType item = null;
            var tc = TransactionContext.Begin(ServiceName);
            try
            {
                string sql = SQLParser.MakeSQL(@"SELECT jobTypeID FROM JobConcern WHERE ConcernID = %n", employeeId);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                if (dr.Read())
                    item = CreateJobConcernObject(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return item;
        }


        //For Mobile
        public ObjectsTemplate<Job> GetJobByEmployeeId(long employeeId)
        {
            ObjectsTemplate<Job> items;
            try
            {
                var tc = TransactionContext.Begin(ServiceName);

                string query = SQLParser.MakeSQL(@"SELECT j.* , ja.AssignedFFID AssignedFFID
											  FROM Job j
                                              LEFT JOIN JobAssignment ja ON ja.JobID=j.JobID
											  WHERE ja.AssignedFFID==%n AND ja.AssignmentStatus=1", employeeId);

                var dr = new DataReader(tc.ExecuteReader(query));
                items = CreateJobObjects(dr);
                dr.Close();
                //dr = null;

                if (items != null)
                {
                    foreach (var item in items)
                    {
                        item.JobUpdates = GetJobStatusByJobId(tc, item.PKID);
                    }
                }

                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return items;
        }

        //For Mobile
        public ObjectsTemplate<Job> GetAcceptedJobByEmployeeId(long employeeId)
        {
            ObjectsTemplate<Job> items = null;
            TransactionContext tc;
            DataReader dr;
            try
            {
                tc = TransactionContext.Begin(ServiceName);

                string query = SQLParser.MakeSQL(@"SELECT j.* , ja.AssignedFFID AssignedFFID
											  FROM Job j
                                              LEFT JOIN JobAssignment ja ON ja.JobID=j.JobID
											  WHERE ja.AssignedFFID==%n AND ja.AssignmentStatus=2", employeeId);

                dr = new DataReader(tc.ExecuteReader(query));
                items = CreateJobObjects(dr);
                dr.Close();
                //dr = null;

                if (items != null)
                {
                    foreach (var item in items)
                    {
                        item.JobUpdates = GetJobStatusByJobId(tc, item.PKID);
                    }
                }
                dr = null;
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return items;
        }





        public ObjectsTemplate<JobUpdate> GetJobStatusByJobId(long jobID)
        {
            ObjectsTemplate<JobUpdate> items = null;
            TransactionContext tc;
            try
            {
                tc = TransactionContext.Begin(ServiceName);
                items = GetJobStatusByJobId(tc, jobID);
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return items;
        }
        public ObjectsTemplate<JobUpdate> GetJobStatusByJobId(TransactionContext tc, long jobID)
        {
            ObjectsTemplate<JobUpdate> items = null;
            try
            {
                string query = SQLParser.MakeSQL(@"SELECT j.* 
											  FROM JobUpdate j with (nolock)
											  WHERE j.JobID=%n", jobID);
                DataReader dr;
                dr = new DataReader(tc.ExecuteReader(query));
                items = CreateJobUpdateObjects(dr);
                dr.Close();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return items;
        }

        #endregion

        #region pickup & delivery
        public ObjectsTemplate<Job> GetDeliverByCustomerId(int customerId)
        {
            TransactionContext tc = null;
            ObjectsTemplate<Job> items = null;

            try
            {
                //tc = TransactionContext.Begin(ServiceName);
                //string whereCaluse = string.Empty;
                //if (customerId > 0)
                //{
                //    whereCaluse = "AND" + " " + SQLParser.MakeSQL("j.CustomerID = %n", customerId);
                //}

                //whereCaluse = "AND" + " " + SQLParser.MakeSQL("ja.AssignmentStatus != %n", EnumJobAssignmentStatus.Completed);

                //var query = SQLParser.MakeSQL(@"(SELECT j.*, ja.*,
                //                                 usb.Name  as SenderAddress , d.Name as DeliverAddress
                //                                 FROM Job j INNER JOIN JobAssignment ja ON j.JobID = ja.JobID 
                //                                 Inner Join USBBranches usb ON j.BranchID= usb.USBBranchID
                //                           Inner Join ConsignmentPickupDestination cpd on cpd.JobID= j.JobID
                //                           Inner Join District d on cpd.DestinationDistrictID= d.DistrictID
                //                           where j.JobTypeID=1 %q)
                //                                 UNION
                //                                (SELECT j.JobID, j.JobTypeID,j.JobCode,j.IssueDate,j.Subject,j.Description,j.Remarks,j.EntryDateTime,
                //                                j.Priority,j.Status,j.Color,j.CustomerID,j.ConsignmentID,j.BranchID,j.PrincipalID,j.BagID,j.ReferenceJobID,
                //                                j.ClientFeedBackCount,j.PickupTime,j.CustomerName,j.CustomerPhone,j.IsDocument,j.CountryID,con.ContractualVolume as Weight, 
                //                                j.ContactPerson,j.ContactPersonPhone,j.CustomerType,j.ConsignmentItemID,j.isPackingRequired,j.isSpecialHandlingRequired,
                //                                j.isExportCnFRequired,j.CreatedBy,j.CreatedDate,j.ModifiedBy,j.ModifiedDate,j.JobFor,j.CancelReason,j.ClaimAmount,ja.*,con.SenderLocationName  as SenderAddress, 
                //                                con.DeliveryLocationName as DeliverAddress FROM Job j INNER JOIN JobAssignment ja ON j.JobID = ja.JobID  
                //                                INNER JOIN Consignments con ON j.ConsignmentID = con.ConsignmentID 
                //                                where j.JobTypeID=2 %q)", whereCaluse, whereCaluse);
                //var dr = new DataReader(tc.ExecuteReader(query));

                //items = CreateJobObjects(dr);

                //dr.Close();
                //tc.End();
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();
                throw new Exception(e.Message, e);
            }

            return items;
        }


        public ObjectsTemplate<Job> GetOtherJobTypes(List<JobTypeEnum> jobTypes, int customerId)
        {
            TransactionContext tc = null;
            ObjectsTemplate<Job> items = null;

            try
            {
                //tc = TransactionContext.Begin(ServiceName);
                //string whereCaluse = string.Empty;
                //if (customerId > 0)
                //{
                //    whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("j.CustomerID = %n", customerId);
                //}
                //if (jobTypes != null)
                //{
                //    whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("j.JobTypeID IN (%q)", string.Join(",", jobTypes.Select(x => (int)x)));
                //}

                //// whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("ja.AssignmentStatus != %n", EnumJobAssignmentStatus.Completed);

                //var query = SQLParser.MakeSQL(@"SELECT TOP 10 j.* From Job j %q ORDER BY j.EntryDateTime asc", whereCaluse);

                //var dr = new DataReader(tc.ExecuteReader(query));

                //items = CreateOtherJobObjects(dr);

                //dr.Close();
                //tc.End();
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();
                throw new Exception(e.Message, e);
            }

            return items;
        }

        #endregion

        #region Save
        private string AutoJobAssignment(TransactionContext tc, Job item)
        {
            string assignedFFID="";
            ObjectsTemplate<Employee> teamsItems = null;
            ObjectsTemplate<Employee> teammembers = null;
            ObjectsTemplate<Holiday> nationalHolidays = null;
            ObjectsTemplate<EmployeeLeave> teamleaves = null;
            ObjectsTemplate<EmployeeLeave> teamMemberleaves = null;
            ObjectsTemplate<JobAssignment> jobAssignmentItems = null;
            string sql = string.Empty;
            try
            {
                //false for Any Team for tagged with distributor(of any thana)
                teamsItems = new EmployeeDA().GetEmployeeForAutoJobAssignment(tc, item, false);
                //By Force If No ServiceType Then Set ServiceType="1"
                #region By Force If No ServiceType Then Set ServiceType="1"
                if (teamsItems != null && teamsItems.Count > 0)
                {
                    foreach (var itm in teamsItems.ToList())
                    {
                        if (string.IsNullOrEmpty(itm.ServiceType) ||
                           string.IsNullOrWhiteSpace(itm.ServiceType))
                        {
                            itm.ServiceType = "1";
                        }
                    }
                } 
                #endregion

                nationalHolidays = new HolidayDA().GetHolidays(tc, DateTime.Now, DateTime.Now.AddDays(2));

                if (teamsItems != null)
                {
                    teamMemberleaves = new EmployeeLeaveDA().GetEmployeeLeavesDistributorANDThanaID(tc, item.DistributorID, teamsItems.Where(v => v.ThanaID > 0).Select(c => c.ThanaID ?? 0).ToList(),
                                                                                                    teamsItems.Select(C => C.PKID).ToList(), DateTime.Now, DateTime.Now.AddDays(2), EmployeeTypeEnum.TeamMember);

                    string ids = string.Join(",", teamsItems.Select(C => C.PKID).ToList());
                    sql = SQLParser.MakeSQL(@";WITH cte AS
                                              (SELECT *,ROW_NUMBER() OVER (PARTITION BY AssignedFFID,Cast(AssignedTime As DATE) ORDER BY ToSlot DESC) AS rn
                                               FROM JobAssignment
                                               WHERE AssignedFFID IN (%q) AND Cast(AssignedTime As DATE)>=%d 
                                                     AND Cast(AssignedTime As DATE) <= %d
                                               )
                                              SELECT * FROM cte WHERE rn = 1", string.IsNullOrEmpty(ids) ? "0" : ids, DateTime.Now, DateTime.Now.AddDays(2));

                    var dr = new DataReader(tc.ExecuteReader(sql));
                    jobAssignmentItems = CreateJobAssignmentObjects(dr);
                    dr.Close();
                    dr = null;

                    #region Auto Job Assign

                    #region FOR TODAY Job Assignment TEAM

                    var tempjobAssignmentItems1 = jobAssignmentItems.Where(c => c.AssignedTime.Date == DateTime.Now.Date).ToList();
                    var minvalueObject1 = tempjobAssignmentItems1.FirstOrDefault(m => m.ToSlot == tempjobAssignmentItems1.Min(c => c.ToSlot));

                    #endregion

                    #region FOR Tomorrow Job Assignment TEAM

                    var tempjobAssignmentTomorrowItems1 = jobAssignmentItems.Where(c => c.AssignedTime.Date == DateTime.Now.AddDays(1).Date).ToList();
                    var minvalueTomorrowObject1 = tempjobAssignmentTomorrowItems1.FirstOrDefault(m => m.ToSlot == tempjobAssignmentTomorrowItems1.Min(c => c.ToSlot));

                    #endregion

                    #region FOR Day After Tomorrow Job Assignment TEAM

                    var tempjobAssignmentDayAfterTomorrowItems1 = jobAssignmentItems.Where(c => c.AssignedTime.Date == DateTime.Now.AddDays(2).Date).ToList();
                    var minvalueDayAfterTomorrowObject1 = tempjobAssignmentDayAfterTomorrowItems1.FirstOrDefault(m => m.ToSlot == tempjobAssignmentDayAfterTomorrowItems1.Min(c => c.ToSlot));

                    #endregion

                    //IF NO OR FEW SLOT ARE 
                    #region FOR TODAY

                    #region IF Before 9 AM

                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0)) <= 0)
                    {
                        //IF ANYTEAM DO not Have Any JoB Today then Direct Assign
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //DO
                                if (tmitm.OperationDate != null && tmitm.OperationDate.Value.Date == DateTime.Now.Date)
                                {
                                    //FOR NEW Installation
                                    //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 1, (item.JobTypeID == JobTypeEnum.NIR ? 2 : 1), DateTime.Now);
                                        return assignedFFID;
                                    }
                                    //FOR SERVICE ONLY
                                    //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                    if (item.JobTypeID == JobTypeEnum.SR)
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 1, 1, DateTime.Now);
                                        return assignedFFID;
                                    }
                                }

                            }
                        }
                    }

                    #endregion

                    #region IF Before 10:30 AM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 10, 30, 0)) <= 0)
                    {

                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //DO
                                if (tmitm.OperationDate != null && tmitm.OperationDate.Value.Date == DateTime.Now.Date)
                                {
                                    //FOR NEW Installation
                                    //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 2, item.JobTypeID == JobTypeEnum.NIR ? 3 : 2, DateTime.Now);
                                        return assignedFFID;
                                    }
                                    //FOR SERVICE ONLY
                                    //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                    if (item.JobTypeID == JobTypeEnum.SR)
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 2, 2, DateTime.Now);
                                        return assignedFFID;
                                    }
                                }

                            }
                        }

                        if (minvalueObject1 != null && Convert.ToInt32(minvalueObject1.ToSlot) == 1)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueObject1.AssignedFFID);

                            if (tempTEAM != null && tempTEAM.OperationDate != null && tempTEAM.OperationDate.Value.Date == DateTime.Now.Date)
                            {
                                //FOR NEW Installation
                                //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 2, item.JobTypeID == JobTypeEnum.NIR ? 3 : 2, DateTime.Now);
                                    return assignedFFID;//Return After Assignment
                                }
                                //FOR SERVICE ONLY
                                //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 2, 2, DateTime.Now);
                                    return assignedFFID;//Return After Assignment
                                }
                            }
                        }


                    }
                    #endregion

                    #region IF Before 12:00 PM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 12, 00, 0)) <= 0)
                    {

                        //IF NO ONE Have ANY TAKS TO DO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //DO
                                if (tmitm.OperationDate != null && tmitm.OperationDate.Value.Date == DateTime.Now.Date)
                                {
                                    //FOR NEW Installation
                                    //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 3, item.JobTypeID == JobTypeEnum.NIR ? 4 : 3, DateTime.Now);
                                        return assignedFFID;
                                    }
                                    //FOR SERVICE ONLY
                                    //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                    if (item.JobTypeID == JobTypeEnum.SR)
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 3, 3, DateTime.Now);
                                        return assignedFFID;
                                    }
                                }
                            }
                        }

                        if (minvalueObject1 != null && Convert.ToInt32(minvalueObject1.ToSlot) == 2)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueObject1.AssignedFFID);

                            if (tempTEAM != null && tempTEAM.OperationDate != null && tempTEAM.OperationDate.Value.Date == DateTime.Now.Date)
                            {
                                //FOR NEW Installation
                                //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 3, item.JobTypeID == JobTypeEnum.NIR ? 4 : 3, DateTime.Now);
                                    return assignedFFID;//Return After Assignment
                                }
                                //FOR SERVICE ONLY
                                //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 3, 3, DateTime.Now);
                                    return assignedFFID;//Return After Assignment
                                }
                            }
                        }


                    }
                    #endregion

                    #region IF Before 1:30 PM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 13, 30, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //DO
                                if (tmitm.OperationDate != null && tmitm.OperationDate.Value.Date == DateTime.Now.Date)
                                {
                                    //FOR NEW Installation
                                    //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 4, item.JobTypeID == JobTypeEnum.NIR ? 5 : 4, DateTime.Now);
                                        return assignedFFID;
                                    }
                                    //FOR SERVICE ONLY
                                    //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                    if (item.JobTypeID == JobTypeEnum.SR)
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 4, 4, DateTime.Now);
                                        return assignedFFID;
                                    }
                                }
                            }
                        }

                        if (minvalueObject1 != null && Convert.ToInt32(minvalueObject1.ToSlot) == 3)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueObject1.AssignedFFID);

                            if (tempTEAM != null && tempTEAM.OperationDate != null && tempTEAM.OperationDate.Value.Date == DateTime.Now.Date)
                            {
                                //FOR NEW Installation
                                //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 4, item.JobTypeID == JobTypeEnum.NIR ? 5 : 4, DateTime.Now);
                                    return assignedFFID;//Return After Assignment
                                }
                                //FOR SERVICE ONLY
                                //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 4, 4, DateTime.Now);
                                    return assignedFFID;//Return After Assignment
                                }
                            }
                        }
                    }

                    #endregion

                    #region IF Before 3:00 PM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 15, 00, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //DO
                                if (tmitm.OperationDate != null && tmitm.OperationDate.Value.Date == DateTime.Now.Date)
                                {
                                    //FOR NEW Installation
                                    //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 5, item.JobTypeID == JobTypeEnum.NIR ? 6 : 5, DateTime.Now);
                                        return assignedFFID;
                                    }
                                    //FOR SERVICE ONLY
                                    //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                    if (item.JobTypeID == JobTypeEnum.SR)
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 5, 5, DateTime.Now);
                                        return assignedFFID;
                                    }
                                }
                            }
                        }

                        if (minvalueObject1 != null && Convert.ToInt32(minvalueObject1.ToSlot) == 4)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueObject1.AssignedFFID);

                            if (tempTEAM != null && tempTEAM.OperationDate != null && tempTEAM.OperationDate.Value.Date == DateTime.Now.Date)
                            {
                                //FOR NEW Installation
                                //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 5, item.JobTypeID == JobTypeEnum.NIR ? 6 : 5, DateTime.Now);
                                    return assignedFFID;//Return After Assignment
                                }
                                //FOR SERVICE ONLY
                                //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 5, 5, DateTime.Now);
                                    return assignedFFID;//Return After Assignment
                                }
                            }
                        }

                    }
                    #endregion

                    #region IF Before 4:30 PM || FOR Service TYPE
                    if (item.JobTypeID == JobTypeEnum.SR)
                    {
                        //IF Before 4:30 PM
                        if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 16, 30, 0)) <= 0)
                        {
                            foreach (var tmitm in teamsItems)
                            {
                                if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.Date && c.AssignedFFID == tmitm.PKID))
                                {
                                    //DO
                                    if (tmitm.OperationDate != null && tmitm.OperationDate.Value.Date == DateTime.Now.Date)
                                    {
                                        //FOR SERVICE ONLY
                                        //if ((tmitm.ServiceType == "1" || tmitm.ServiceType == "2") && item.JobTypeID == JobTypeEnum.SR)
                                        if (item.JobTypeID == JobTypeEnum.SR)
                                        {
                                            assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now, 6, 6, DateTime.Now);
                                            return assignedFFID;
                                        }
                                    }
                                }
                            }

                            if (minvalueObject1 != null && Convert.ToInt32(minvalueObject1.ToSlot) == 5)
                            {
                                var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueObject1.AssignedFFID);

                                if (tempTEAM != null && tempTEAM.OperationDate != null && tempTEAM.OperationDate.Value.Date == DateTime.Now.Date)
                                {
                                    //FOR SERVICE ONLY
                                    //if ((tempTEAM.ServiceType == "1" || tempTEAM.ServiceType == "2") && item.JobTypeID == JobTypeEnum.SR)
                                    if (item.JobTypeID == JobTypeEnum.SR)
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now, 6, 6, DateTime.Now);
                                        return assignedFFID;//Return After Assignment
                                    }
                                }
                            }
                        }
                    }

                    #endregion

                    #endregion

                    #region TOMORROW

                    #region IF Before 9 AM

                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(1).Year, DateTime.Now.AddDays(1).Month, DateTime.Now.AddDays(1).Day, 9, 0, 0)) <= 0)
                    {
                        //IF ANYTEAM DO not Have Any JoB Today then Direct Assign
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(1).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 1, item.JobTypeID == JobTypeEnum.NIR ? 2 : 1, DateTime.Now.AddDays(1));
                                    return assignedFFID;//Return After Assignment
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 1, 1, DateTime.Now.AddDays(1));
                                    return assignedFFID;//Return After Assignment
                                }
                            }
                        }
                    }

                    #endregion

                    #region IF Before 10:30 AM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(1).Year, DateTime.Now.AddDays(1).Month, DateTime.Now.AddDays(1).Day, 10, 30, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(1).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 2, item.JobTypeID == JobTypeEnum.NIR ? 3 : 2, DateTime.Now.AddDays(1));
                                    return assignedFFID;
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 2, 2, DateTime.Now.AddDays(1));
                                    return assignedFFID;
                                }
                            }
                        }

                        if (minvalueTomorrowObject1 != null && Convert.ToInt32(minvalueTomorrowObject1.ToSlot) == 1)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueTomorrowObject1.AssignedFFID);

                            //FOR NEW Installation
                            //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 2, item.JobTypeID == JobTypeEnum.NIR ? 3 : 2, DateTime.Now.AddDays(1));
                                return assignedFFID;//Return After Assignment
                            }
                            //FOR SERVICE ONLY
                            //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                            if (item.JobTypeID == JobTypeEnum.SR)
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 2, 2, DateTime.Now.AddDays(1));
                                return assignedFFID;//Return After Assignment
                            }
                        }
                    }
                    #endregion

                    #region IF Before 12:00 PM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(1).Year, DateTime.Now.AddDays(1).Month, DateTime.Now.AddDays(1).Day, 12, 00, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(1).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 3, item.JobTypeID == JobTypeEnum.NIR ? 4 : 3, DateTime.Now.AddDays(1));
                                    return assignedFFID;
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 3, 3, DateTime.Now.AddDays(1));
                                    return assignedFFID;
                                }
                            }
                        }

                        if (minvalueTomorrowObject1 != null && Convert.ToInt32(minvalueTomorrowObject1.ToSlot) == 2)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueTomorrowObject1.AssignedFFID);

                            //FOR NEW Installation
                            //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 3, item.JobTypeID == JobTypeEnum.NIR ? 4 : 3, DateTime.Now.AddDays(1));
                                return assignedFFID;//Return After Assignment
                            }
                            //FOR SERVICE ONLY
                            //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                            if (item.JobTypeID == JobTypeEnum.SR)
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 3, 3, DateTime.Now.AddDays(1));
                                return assignedFFID;//Return After Assignment
                            }
                        }
                    }
                    #endregion

                    #region IF Before 1:30 PM

                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(1).Year, DateTime.Now.AddDays(1).Month, DateTime.Now.AddDays(1).Day, 13, 30, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(1).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 4, item.JobTypeID == JobTypeEnum.NIR ? 5 : 4, DateTime.Now.AddDays(1));
                                    return assignedFFID;
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 4, 4, DateTime.Now.AddDays(1));
                                    return assignedFFID;
                                }
                            }
                        }

                        if (minvalueTomorrowObject1 != null && Convert.ToInt32(minvalueTomorrowObject1.ToSlot) == 3)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueTomorrowObject1.AssignedFFID);

                            //FOR NEW Installation
                            //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 4, item.JobTypeID == JobTypeEnum.NIR ? 5 : 4, DateTime.Now.AddDays(1));
                                return assignedFFID;//Return After Assignment
                            }
                            //FOR SERVICE ONLY
                            //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                            if (item.JobTypeID == JobTypeEnum.SR)
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 4, 4, DateTime.Now.AddDays(1));
                                return assignedFFID;//Return After Assignment
                            }
                        }
                    }
                    #endregion

                    #region IF Before 3:00 PM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(1).Year, DateTime.Now.AddDays(1).Month, DateTime.Now.AddDays(1).Day, 15, 00, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(1).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 5, item.JobTypeID == JobTypeEnum.NIR ? 6 : 5, DateTime.Now.AddDays(1));
                                    return assignedFFID;
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 5, 5, DateTime.Now.AddDays(1));
                                    return assignedFFID;
                                }
                            }
                        }

                        if (minvalueTomorrowObject1 != null && Convert.ToInt32(minvalueTomorrowObject1.ToSlot) == 4)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueTomorrowObject1.AssignedFFID);

                            //FOR NEW Installation
                            //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 5, item.JobTypeID == JobTypeEnum.NIR ? 6 : 5, DateTime.Now.AddDays(1));
                                return assignedFFID;//Return After Assignment
                            }
                            //FOR SERVICE ONLY
                            //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                            if (item.JobTypeID == JobTypeEnum.SR)
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 5, 5, DateTime.Now.AddDays(1));
                                return assignedFFID;//Return After Assignment
                            }
                        }

                    }
                    #endregion

                    #region IF Before 4:30 PM || FOR Service TYPE
                    if (item.JobTypeID == JobTypeEnum.SR)
                    {
                        //IF Before 4:30 PM
                        if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(1).Year, DateTime.Now.AddDays(1).Month, DateTime.Now.AddDays(1).Day, 16, 30, 0)) <= 0)
                        {
                            foreach (var tmitm in teamsItems)
                            {
                                if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(1).Date && c.AssignedFFID == tmitm.PKID))
                                {
                                    //FOR SERVICE ONLY
                                    //if ((tmitm.ServiceType == "1" || tmitm.ServiceType == "2") && item.JobTypeID == JobTypeEnum.SR)
                                    if ( item.JobTypeID == JobTypeEnum.SR)
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 6, 6, DateTime.Now.AddDays(1));
                                        return assignedFFID;
                                    }
                                }
                            }

                            if (minvalueTomorrowObject1 != null && Convert.ToInt32(minvalueTomorrowObject1.ToSlot) == 5)
                            {
                                var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueTomorrowObject1.AssignedFFID);

                                //FOR SERVICE ONLY
                                //if ((tempTEAM.ServiceType == "1" || tempTEAM.ServiceType == "2") && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(1), 6, 6, DateTime.Now.AddDays(1));
                                    return assignedFFID;//Return After Assignment
                                }
                            }
                        }
                    }
                    #endregion

                    #endregion

                    #region DAY AFTER TOMORROW

                    #region IF Before 9 AM

                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(2).Year, DateTime.Now.AddDays(2).Month, DateTime.Now.AddDays(2).Day, 9, 0, 0)) <= 0)
                    {
                        //IF ANYTEAM DO not Have Any JoB Today then Direct Assign
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Where(c => c.AssignedTime.Date == DateTime.Now.AddDays(2).Date && c.AssignedFFID == tmitm.PKID).Any())
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 1, item.JobTypeID == JobTypeEnum.NIR ? 2 : 1, DateTime.Now.AddDays(2));
                                    return assignedFFID;//Return After Assignment
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 1, 1, DateTime.Now.AddDays(2));
                                    return assignedFFID;//Return After Assignment
                                }
                            }
                        }

                    }
                    #endregion

                    #region IF Before 10:30 AM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(2).Year, DateTime.Now.AddDays(2).Month, DateTime.Now.AddDays(2).Day, 10, 30, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(2).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 2, item.JobTypeID == JobTypeEnum.NIR ? 3 : 2, DateTime.Now.AddDays(2));
                                    return assignedFFID;
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.NIR)
                                if (item.JobTypeID == JobTypeEnum.NIR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 2, 2, DateTime.Now.AddDays(2));
                                    return assignedFFID;
                                }
                            }
                        }

                        if (minvalueDayAfterTomorrowObject1 != null && Convert.ToInt32(minvalueDayAfterTomorrowObject1.ToSlot) == 1)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueDayAfterTomorrowObject1.AssignedFFID);

                            //FOR NEW Installation
                            //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 2, item.JobTypeID == JobTypeEnum.NIR ? 3 : 2, DateTime.Now.AddDays(2));
                                return assignedFFID;//Return After Assignment
                            }
                            //FOR SERVICE ONLY
                            //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                            if (item.JobTypeID == JobTypeEnum.SR)
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 2, 2, DateTime.Now.AddDays(2));
                                return assignedFFID;//Return After Assignment
                            }
                        }
                    }
                    #endregion

                    #region IF Before 12:00 PM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(2).Year, DateTime.Now.AddDays(2).Month, DateTime.Now.AddDays(2).Day, 12, 00, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(2).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 3, item.JobTypeID == JobTypeEnum.NIR ? 4 : 3, DateTime.Now.AddDays(2));
                                    return assignedFFID;
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 3, 3, DateTime.Now.AddDays(2));
                                    return assignedFFID;
                                }

                            }
                        }

                        if (minvalueDayAfterTomorrowObject1 != null && Convert.ToInt32(minvalueDayAfterTomorrowObject1.ToSlot) == 2)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueDayAfterTomorrowObject1.AssignedFFID);

                            //FOR NEW Installation
                            //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 3, item.JobTypeID == JobTypeEnum.NIR ? 4 : 3, DateTime.Now.AddDays(2));
                                return assignedFFID;//Return After Assignment
                            }
                            //FOR SERVICE ONLY
                            //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                            if (item.JobTypeID == JobTypeEnum.SR)
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 3, 3, DateTime.Now.AddDays(2));
                                return assignedFFID;//Return After Assignment
                            }
                        }
                    }
                    #endregion

                    #region IF Before 1:30 PM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(2).Year, DateTime.Now.AddDays(2).Month, DateTime.Now.AddDays(2).Day, 13, 30, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(2).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 4, item.JobTypeID == JobTypeEnum.NIR ? 5 : 4, DateTime.Now.AddDays(2));
                                    return assignedFFID;
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 4, 4, DateTime.Now.AddDays(2));
                                    return assignedFFID;
                                }
                            }
                        }

                        if (minvalueDayAfterTomorrowObject1 != null && Convert.ToInt32(minvalueDayAfterTomorrowObject1.ToSlot) == 3)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueDayAfterTomorrowObject1.AssignedFFID);

                            //FOR NEW Installation
                            //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 4, item.JobTypeID == JobTypeEnum.NIR ? 5 : 4, DateTime.Now.AddDays(2));
                                return assignedFFID;//Return After Assignment
                            }
                            //FOR SERVICE ONLY
                            //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                            if ( item.JobTypeID == JobTypeEnum.SR)
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 4, 4, DateTime.Now.AddDays(2));
                                return assignedFFID;//Return After Assignment
                            }
                        }
                    }
                    #endregion

                    #region IF Before 3:00 PM
                    if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(2).Year, DateTime.Now.AddDays(2).Month, DateTime.Now.AddDays(2).Day, 15, 00, 0)) <= 0)
                    {
                        //IF NO ONE Have ANY TAKS TO TO
                        foreach (var tmitm in teamsItems)
                        {
                            if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(2).Date && c.AssignedFFID == tmitm.PKID))
                            {
                                //FOR NEW Installation
                                //if (tmitm.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 5, item.JobTypeID == JobTypeEnum.NIR ? 6 : 5, DateTime.Now.AddDays(2));
                                    return assignedFFID;
                                }
                                //FOR SERVICE ONLY
                                //if (tmitm.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 5, 5, DateTime.Now.AddDays(2));
                                    return assignedFFID;
                                }
                            }
                        }

                        if (minvalueDayAfterTomorrowObject1 != null && Convert.ToInt32(minvalueDayAfterTomorrowObject1.ToSlot) == 4)
                        {
                            var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueDayAfterTomorrowObject1.AssignedFFID);

                            //FOR NEW Installation
                            //if (tempTEAM.ServiceType == "1" && (item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            if ((item.JobTypeID == JobTypeEnum.NIR || item.JobTypeID == JobTypeEnum.SR))
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 5, item.JobTypeID == JobTypeEnum.NIR ? 6 : 5, DateTime.Now.AddDays(2));
                                return assignedFFID;//Return After Assignment
                            }
                            //FOR SERVICE ONLY
                            //if (tempTEAM.ServiceType == "2" && item.JobTypeID == JobTypeEnum.SR)
                            if (item.JobTypeID == JobTypeEnum.SR)
                            {
                                assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 5, 5, DateTime.Now.AddDays(2));
                                return assignedFFID;//Return After Assignment
                            }
                        }

                    }
                    #endregion

                    #region IF Before 4:30 PM || FOR Service TYPE
                    if (item.JobTypeID == JobTypeEnum.SR)
                    {
                        //IF Before 4:30 PM
                        if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.AddDays(2).Year, DateTime.Now.AddDays(2).Month, DateTime.Now.AddDays(2).Day, 16, 30, 0)) <= 0)
                        {
                            foreach (var tmitm in teamsItems)
                            {
                                if (!jobAssignmentItems.Any(c => c.AssignedTime.Date == DateTime.Now.AddDays(2).Date && c.AssignedFFID == tmitm.PKID))
                                {
                                    //FOR SERVICE ONLY
                                    //if ((tmitm.ServiceType == "1" || tmitm.ServiceType == "2") && item.JobTypeID == JobTypeEnum.SR)
                                    if (item.JobTypeID == JobTypeEnum.SR)
                                    {
                                        assignedFFID=AutoJobAssignSave(tc, tmitm.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 6, 6, DateTime.Now.AddDays(2));
                                        return assignedFFID;
                                    }
                                }
                            }

                            if (minvalueDayAfterTomorrowObject1 != null && Convert.ToInt32(minvalueDayAfterTomorrowObject1.ToSlot) == 5)
                            {
                                var tempTEAM = teamsItems.FirstOrDefault(c => c.PKID == minvalueDayAfterTomorrowObject1.AssignedFFID);

                                //FOR SERVICE ONLY
                                //if ((tempTEAM.ServiceType == "1" || tempTEAM.ServiceType == "2") && item.JobTypeID == JobTypeEnum.SR)
                                if (item.JobTypeID == JobTypeEnum.SR)
                                {
                                    assignedFFID=AutoJobAssignSave(tc, tempTEAM.PKID, item.CreatedBy, item.PKID, DateTime.Now.AddDays(2), 6, 6, DateTime.Now.AddDays(2));
                                    return assignedFFID;//Return After Assignment
                                }
                            }
                        }
                    }
                    #endregion

                    #endregion

                    #endregion
                }

            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception("Auto-Job-Assign-Save:" + e.Message, e);
            }
            return assignedFFID;
        }

        private string AutoJobAssignSave(TransactionContext tc, long assignedFFID, long assignedFromFFID, long jobID, DateTime scheduleDate, int fromSlot, int toSlot, DateTime assignedTime)
        {
            try
            {
                var jobassobj = new JobAssignment();
                jobassobj.AssignedFFID = assignedFFID;
                jobassobj.JobID = jobID;
                jobassobj.AssignedFromFFID = assignedFromFFID;
                jobassobj.ScheduleDate = scheduleDate;
                jobassobj.FromSlot = fromSlot;
                jobassobj.ToSlot = toSlot;
                jobassobj.AssignedTime = assignedTime;
                jobassobj.StatusTime = DateTime.Now;
                jobassobj.Status = EnumJobAssignmentStatus.Assigned;
                jobassobj.CreatedDate = DateTime.Now;
                jobassobj.CreatedBy = assignedFFID;
                SaveJobAssignment(tc, jobassobj);

                AutoJobAssignSaveJobUpdate(tc, jobID, scheduleDate, fromSlot, toSlot);
                //SendPushNotificationToSpecificEmployee(assignedFFID.ToString());
                tc.ExecuteNonQuery(@"UPDATE JOB SET IsAutoAssignment=%n WHERE JobID = %n", 1, jobID);

            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return assignedFFID.ToString()??"";
        }

        public bool IsTeamJobAssignExist(long teamId)
        {
            bool isExist = false;
            int count = 0;
            try
            {
                var tc = TransactionContext.Begin(ServiceName);
                object ob = tc.ExecuteScalar(@"SELECT COUNT(j.JobID) FROM JobAssignment ja 
                                               INNER JOIN JOB j ON j.JobID = ja.JobID
                                               WHERE ja.AssignedFFID = %n and j.Status <> %n", teamId, EnumJobStatus.Cancel);
                if (ob != null)
                {
                    count = Convert.ToInt32(ob);
                }
                tc.End();

                if (count > 0)
                {
                    isExist = true;
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return isExist;
        }

        public string JobCheck(long jobTypeID, int fromSlot, DateTime assignedDate)
        {
            TransactionContext tc = null;
            try
            {
                #region IF Before 9 AM

                if (assignedDate == DateTime.Today)
                {
                    if (jobTypeID == 1)
                    {
                        if (fromSlot == (int)SlotTypeEnum.SlotOne)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }

                        if (fromSlot == (int)SlotTypeEnum.SlotThree)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 12, 00, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }
                        if (fromSlot == (int)SlotTypeEnum.SlotSix)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 16, 30, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }
                    }

                    if (jobTypeID == 2)
                    {
                        if (fromSlot == (int)SlotTypeEnum.SlotOne)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }

                        if (fromSlot == (int)SlotTypeEnum.SlotTwo)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 10, 30, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }
                        if (fromSlot == (int)SlotTypeEnum.SlotThree)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 12, 00, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }
                        if (fromSlot == (int)SlotTypeEnum.SlotFour)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 13, 30, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }

                        if (fromSlot == (int)SlotTypeEnum.SlotFive)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 15, 00, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }

                        if (fromSlot == (int)SlotTypeEnum.SlotSix)
                        {
                            if (DateTime.Compare(DateTime.Now, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 16, 00, 0)) >= 0)
                            {
                                return "Can't assign in this slot";
                            }
                        }
                    }
                }

                #endregion

            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }

            return "ok";
        }



        public void SendPushNotificationToSpecificEmployee(string employeeId)
        {
            string receiverEmployeeId = employeeId;
            var request = WebRequest.Create("https://onesignal.com/api/v1/notifications") as HttpWebRequest;

            request.KeepAlive = true;
            request.Method = "POST";
            request.ContentType = "application/json; charset=utf-8";
            string data =
                "{" + "\"app_id\": \"b5f5a37e-f5e1-4663-b008-877dd5ad96d8\","
                + "\"contents\": {\"en\": \"Akash Message done\"},"
                + "\"include_external_user_ids\": [" + "\"" + receiverEmployeeId + "\"" + "]}"

                ;
            byte[] byteArray = Encoding.UTF8.GetBytes(data);

            string responseContent = null;

            try
            {
                using (var writer = request.GetRequestStream())
                {
                    writer.Write(byteArray, 0, byteArray.Length);
                }

                using (var response = request.GetResponse() as HttpWebResponse)
                {
                    using (var reader = new StreamReader(response.GetResponseStream()))
                    {
                        responseContent = reader.ReadToEnd();
                    }
                }
            }
            catch (WebException e)
            {
                throw new Exception(e.Message, e);
            }

            System.Diagnostics.Debug.WriteLine(responseContent);
        }

        void AutoJobAssignSaveJobUpdate(TransactionContext tc, long jobID, DateTime scheduleDate, long fromSlot, long toSlot)
        {
            try
            {
                DateTime startDateTime = scheduleDate;
                DateTime endDateTime = scheduleDate;

                #region SET StartDateTime
                if (fromSlot == 1)
                {
                    startDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 9, 0, 0);
                }
                if (fromSlot == 2)
                {
                    startDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 10, 30, 0);
                }
                if (fromSlot == 3)
                {
                    startDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 12, 00, 0);
                }
                if (fromSlot == 4)
                {
                    startDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 13, 30, 0);
                }
                if (fromSlot == 5)
                {
                    startDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 15, 0, 0);
                }
                if (fromSlot == 6)
                {
                    startDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 16, 30, 0);
                }

                #endregion

                #region SET EndDateTime

                if (toSlot == 1)
                {
                    endDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 10, 30, 0);
                }
                if (toSlot == 2)
                {
                    endDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 12, 0, 0);
                }
                if (toSlot == 3)
                {
                    endDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 13, 30, 0);
                }
                if (toSlot == 4)
                {
                    endDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 15, 00, 0);
                }
                if (toSlot == 5)
                {
                    endDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 16, 30, 0);
                }
                if (toSlot == 6)
                {
                    endDateTime = new DateTime(scheduleDate.Year, scheduleDate.Month, scheduleDate.Day, 18, 00, 0);
                }

                #endregion


                string query = SQLParser.MakeSQL(@"UPDATE Job SET Status= %n, 
                                                  StartDateTime = %D, 
                                                  EndDateTime = %D WHERE JobID=%n", EnumJobAssignmentStatus.Assigned, startDateTime, endDateTime, jobID);
                tc.ExecuteNonQuery(query);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }


        public long SaveJob(Job item)
        {
            string msg = "";
            long id = 0;
            TransactionContext tc = null;
            try
            {
                msg = "JOB SAVE START:";
                tc = TransactionContext.Begin(true, ServiceName);
                id = SaveJob(tc, item);
                tc.End();
                msg = "";

                if (item.IsAutoAssignment)
                {
                    string assignedFFID = "";
                    tc = TransactionContext.Begin(true, ServiceName);
                    assignedFFID=AutoJobAssignment(tc, item);
                    tc.End();
                    msg = "Job AND Auto Assign Done.\nTrying To Send Push Notification:";
                    SendPushNotificationToSpecificEmployee(assignedFFID.ToString());
                }
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(msg+e.Message, e);
            }
            return id;
        }
        public string SaveJobs(List<Job> jobs)
        {
            TransactionContext tc = null;
            try
            {
                tc = TransactionContext.Begin(true, ServiceName);
                foreach (var job in jobs)
                {
                    SaveJob(tc,job);
                }
                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }

            return "ok";
        }

       

        public long SaveJob(TransactionContext tc, Job item)
        {
            long id;
            bool isNew;
            try
            {
                isNew = item.IsNew;
                item.EntryDateTime = DateTime.Now;
                if (item.IsNew)
                {
                    item.CreatedDate = DateTime.Now;
                }
                else
                {
                    item.ModifiedDate = DateTime.Now;
                }
                id = SaveJobHeader(tc, item);
                UpdateJobHeader(tc, id);
                //UpdateConsignmentItemStatus(tc, item);

                tc.ExecuteNonQuery(@"DELETE FROM JobAttachment WHERE JobID = %n", id);
                tc.ExecuteNonQuery(@"DELETE FROM JobNotification WHERE JobID = %n", id);
                tc.ExecuteNonQuery(@"DELETE FROM JobUpdate WHERE JobID = %n", id);
                //tc.ExecuteNonQuery(@"DELETE FROM ConsignmentPickupDestination WHERE JobID = %n", id);

                foreach (var jobAttachment in item.JobAttachments ?? new ObjectsTemplate<JobAttachment>())
                {
                    jobAttachment.JobID = id;
                    SaveJobAttachment(tc, jobAttachment);
                }

                foreach (var jobNotification in item.JobNotifications ?? new ObjectsTemplate<JobNotification>())
                {
                    jobNotification.JobID = id;
                    SaveJobNotification(tc, jobNotification);
                }

                if (isNew && item.JobAssignment != null)
                {
                    item.JobAssignment.JobID = id;
                    SaveJobAssignment(tc, item.JobAssignment);
                }

                foreach (var jobUpdate in item.JobUpdates ?? new ObjectsTemplate<JobUpdate>())
                {
                    jobUpdate.JobID = id;
                    SaveJobUpdate(tc, jobUpdate);
                }
              //  item.IsAutoAssignment = true;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return id;
        }

        private long SaveJobHeader(TransactionContext tc, Job item)
        {

            bool isnew = false;
            try
            {
                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@JobTypeID", SqlDbType.Int, item.JobTypeID),
                    SqlHelperExtension.CreateInParam("@JobCode", SqlDbType.VarChar, item.JobCode),
                    SqlHelperExtension.CreateInParam("@IssueDate", SqlDbType.DateTime, item.IssueDate),
                    SqlHelperExtension.CreateInParam("@Subject", SqlDbType.VarChar, item.Subject),
                    //SqlHelperExtension.CreateInParam("@Description", SqlDbType.VarChar, item.Description),
                    SqlHelperExtension.CreateInParam("@Remarks", SqlDbType.VarChar, item.Remarks),
                    SqlHelperExtension.CreateInParam("@EntryDateTime", SqlDbType.DateTime, item.EntryDateTime),
                    //SqlHelperExtension.CreateInParam("@Priority", SqlDbType.Int, item.Priority),
                    SqlHelperExtension.CreateInParam("@Status", SqlDbType.Int, item.Status),
                    //SqlHelperExtension.CreateInParam("@Color", SqlDbType.VarChar, item.ColorCode),
                    SqlHelperExtension.CreateInParam("@CustomerID", SqlDbType.Int, item.CustomerID!=null && item.CustomerID == 0 ? null: item.CustomerID),
                 // SqlHelperExtension.CreateInParam("@ConsignmentID", SqlDbType.Int, item.ConsignmentID),
                    //SqlHelperExtension.CreateInParam("@BranchID", SqlDbType.Int, item.BranchID),
                   // SqlHelperExtension.CreateInParam("@PrincipalID", SqlDbType.Int, item.PrincipalID),
                   // SqlHelperExtension.CreateInParam("@BagID", SqlDbType.Int, item.BagID),
                    SqlHelperExtension.CreateInParam("@ReferenceJobID", SqlDbType.Int, item.ReferenceJobID),
                   // SqlHelperExtension.CreateInParam("@ClientFeedBackCount", SqlDbType.Int, item.ClientFeedbackCount),
                    //SqlHelperExtension.CreateInParam("@PickupTime", SqlDbType.DateTime, item.PickupTime),
                    SqlHelperExtension.CreateInParam("@CustomerName", SqlDbType.VarChar, item.CustomerName),
                    SqlHelperExtension.CreateInParam("@FirstName", SqlDbType.VarChar, item.FirstName),
                    SqlHelperExtension.CreateInParam("@LastName", SqlDbType.VarChar, item.LastName),
                    SqlHelperExtension.CreateInParam("@CustomerPhone", SqlDbType.VarChar, item.CustomerPhone),
                    //SqlHelperExtension.CreateInParam("@IsDocument", SqlDbType.Int, item.DocumentType),
                    //SqlHelperExtension.CreateInParam("@CustomerType", SqlDbType.Int, item.CustomerType),
                    //SqlHelperExtension.CreateInParam("@CountryID", SqlDbType.Int, item.CountryID),
                   // SqlHelperExtension.CreateInParam("@Weight", SqlDbType.Money, item.Weight),
                   // SqlHelperExtension.CreateInParam("@ContactPerson", SqlDbType.VarChar, item.ContactPerson),
                   // SqlHelperExtension.CreateInParam("@ContactPersonPhone", SqlDbType.VarChar, item.ContactPersonPhone),
                   // SqlHelperExtension.CreateInParam("@ConsignmentItemID", SqlDbType.Int, item.ConsignmentItemID),
                    //SqlHelperExtension.CreateInParam("@isPackingRequired", SqlDbType.Int, item.isPackingRequired),
                   // SqlHelperExtension.CreateInParam("@isSpecialHandlingRequired", SqlDbType.Int, item.isSpecialHandlingRequired),
                   // SqlHelperExtension.CreateInParam("@isExportCnFRequired", SqlDbType.Int, item.isExportCnFRequired),
                   // SqlHelperExtension.CreateInParam("@JobFor", SqlDbType.Int, item.JobFor),
                    SqlHelperExtension.CreateInParam("@CreatedBy", SqlDbType.Int, item.CreatedBy),
                    SqlHelperExtension.CreateInParam("@CreatedDate", SqlDbType.DateTime, item.CreatedDate),
                    SqlHelperExtension.CreateInParam("@ModifiedBy", SqlDbType.Int, item.ModifiedBy),
                    SqlHelperExtension.CreateInParam("@ModifiedDate", SqlDbType.DateTime, item.ModifiedDate),
                    SqlHelperExtension.CreateInParam("@CancelReason", SqlDbType.VarChar, item.CancelReason),
                    //SqlHelperExtension.CreateInParam("@ClaimAmount",SqlDbType.Money,item.ClaimAmount),
                    SqlHelperExtension.CreateInParam("@ThanaID",SqlDbType.Int,item.ThanaID),
                    SqlHelperExtension.CreateInParam("@DistributorID",SqlDbType.Int,item.DistributorID),
                    SqlHelperExtension.CreateInParam("@STBnumber",SqlDbType.VarChar,item.STBnumber),
                    SqlHelperExtension.CreateInParam("@CustomerNID",SqlDbType.VarChar,item.CustomerNID),
                    SqlHelperExtension.CreateInParam("@CustomerDOB",SqlDbType.DateTime,item.CustomerDOB),
                    SqlHelperExtension.CreateInParam("@Gender",SqlDbType.Int,item.Gender),
                    SqlHelperExtension.CreateInParam("@Landmark",SqlDbType.VarChar,item.Landmark),
                    SqlHelperExtension.CreateInParam("@HouseNo",SqlDbType.VarChar,item.HouseNo),
                    SqlHelperExtension.CreateInParam("@RoadNo",SqlDbType.VarChar,item.RoadNo),
                    SqlHelperExtension.CreateInParam("@Cpe",SqlDbType.Int,item.Cpe),
                    SqlHelperExtension.CreateInParam("@ServicePackageID",SqlDbType.Int,item.servicePackageID),
                    SqlHelperExtension.CreateInParam("@DealerID",SqlDbType.Int,item.DealerID),
                    SqlHelperExtension.CreateInParam("@SubscriberId",SqlDbType.VarChar,item.SubscriberId),
                    SqlHelperExtension.CreateInParam("@ReferenceType",SqlDbType.Int,(int)item.ReferenceType),
                    SqlHelperExtension.CreateInParam("@ReferenceID",SqlDbType.Int,item.ReferenceID),
                    SqlHelperExtension.CreateInParam("@DistrictID",SqlDbType.Int,item.DistrictId),
                    SqlHelperExtension.CreateInParam("@Classification",SqlDbType.Int,(int)item.Classification),
                    SqlHelperExtension.CreateInParam("@ReferenceCustomerID",SqlDbType.Int,item.referenceCustomerID),
                    SqlHelperExtension.CreateInParam("@CustomerReferenceType",SqlDbType.Int, (int)item.CustomerReferenceType),
                    SqlHelperExtension.CreateInParam("@SalesProgramID",SqlDbType.Int,item.SalesProgramID),

                    SqlHelperExtension.CreateInParam("@IssueNo",SqlDbType.VarChar,item.IssueNo),
                    SqlHelperExtension.CreateInParam("@IssueType",SqlDbType.VarChar,item.IssueType),
                    SqlHelperExtension.CreateInParam("@Assignee",SqlDbType.VarChar,item.Assignee),
                    SqlHelperExtension.CreateInParam("@ReasonCategory",SqlDbType.VarChar,item.ReasonCategory),
                    SqlHelperExtension.CreateInParam("@ResponseCategory",SqlDbType.VarChar,item.ResponseCategory),
                    SqlHelperExtension.CreateInParam("@TempResolutionCategory",SqlDbType.VarChar,item.TempResolutionCategory),
                    SqlHelperExtension.CreateInParam("@FinalResolutionCategory",SqlDbType.VarChar,item.FinalResolutionCategory),
                    SqlHelperExtension.CreateInParam("@StartDateTime",SqlDbType.DateTime,item.StartDateTime),
                    SqlHelperExtension.CreateInParam("@ExpectedCompletionDateTime",SqlDbType.DateTime,item.ExpectedCompletionDateTime),
                    SqlHelperExtension.CreateInParam("@ActualCompletionDateTime",SqlDbType.DateTime,item.ActualCompletionDateTime),
                    SqlHelperExtension.CreateInParam("@IsInstallerBehaviour",SqlDbType.Bit,item.IsInstallerBehaviour),
                    SqlHelperExtension.CreateInParam("@IsPictureQuality",SqlDbType.Bit,item.IsPictureQuality),
                    SqlHelperExtension.CreateInParam("@IsFineProduct",SqlDbType.Bit,item.IsFineProduct),
                    SqlHelperExtension.CreateInParam("@IsSTBRemoteControlUnit",SqlDbType.Bit,item.IsSTBRemoteControl),
                    SqlHelperExtension.CreateInParam("@IsAutoAssignment",SqlDbType.Bit,item.IsAutoAssignment),
                    SqlHelperExtension.CreateInParam("@RescheduleDate",SqlDbType.DateTime,item.RescheduleDate),
                    SqlHelperExtension.CreateInParam("@CustomerRemarks",SqlDbType.VarChar,item.CustomerRemarks)
                };

                string procName;
                if (item.IsNew)
                {
                    procName = "[dbo].[InsertJob]";
                    p.Add(SqlHelperExtension.CreateOutParam("@JobID", SqlDbType.Int, item.PKID));
                }
                else
                {
                    procName = "[dbo].[UpdateJob]";
                    p.Add(SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, item.PKID));
                }

                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());
                if (item.IsNew)
                {
                    item.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@JobID").Value);
                    isnew = true;
                }
                p = null;

                tc.ExecuteNonQuery("DELETE FROM FileManager WHERE UploaderModule = %n and ReferenceID = %n", (int)UploaderModuleEnum.Job, item.PKID);
                if (item.UploadFiles != null && item.UploadFiles.Count > 0)
                {
                    foreach (UploadedFile file in item.UploadFiles)
                    {
                        file.ReferenceID = (int)item.PKID;
                        new FileManagerDA().Save(tc, file);
                    }
                }
                //if (item.UploadNIDBack != null && item.UploadNIDBack.Count > 0)
                //{
                //    foreach (UploadedFile file in item.UploadNIDBack)
                //    {
                //        file.ReferenceID = (int)item.PKID;
                //        new FileManagerDA().Save(tc, file);
                //    }
                //}
                //if (item.Photos != null && item.Photos.Count > 0)
                //{
                //    foreach (UploadedFile file in item.Photos)
                //    {
                //        file.ReferenceID = (int)item.PKID;
                //        new FileManagerDA().Save(tc, file);
                //    }
                //}
                //if (item.AcForm != null && item.AcForm.Count > 0)
                //{
                //    foreach (UploadedFile file in item.AcForm)
                //    {
                //        file.ReferenceID = (int)item.PKID;
                //        new FileManagerDA().Save(tc, file);
                //    }
                //}

                if (isnew && item.CustomerID == null)
                {
                    var CustomerID = SaveCustomer(tc, item);
                    tc.ExecuteNonQuery(@"UPDATE JOB SET CustomerID =%n WHERE JobID = %n", CustomerID, item.PKID);
                }
                if (isnew && item.CustomerID != null && item.ReferenceType == JobReference.ReferenceTypeJob && item.ReferenceID != null)
                {
                    if (!string.IsNullOrEmpty(item.CustomerName) && !string.IsNullOrWhiteSpace(item.CustomerName))
                        tc.ExecuteNonQuery(@"UPDATE Job SET CustomerName =%s WHERE JobID=%n AND CustomerID=%n", item.CustomerName, item.ReferenceID, item.CustomerID);
                    tc.ExecuteNonQuery(@"UPDATE BusinessPartner SET Name =%s WHERE BPID=%n AND Category=%n", item.CustomerName, item.CustomerID, (int)BPCategoryEnum.Customer);

                    if (!string.IsNullOrEmpty(item.CustomerPhone) && !string.IsNullOrWhiteSpace(item.CustomerPhone))
                        tc.ExecuteNonQuery(@"UPDATE Job SET CustomerPhone =%s WHERE JobID=%n AND CustomerID=%n", item.CustomerPhone, item.ReferenceID, item.CustomerID);
                    tc.ExecuteNonQuery(@"UPDATE BusinessPartner SET OwnerMobile=%s WHERE BPID=%n AND Category=%n", item.CustomerPhone, item.CustomerID, (int)BPCategoryEnum.Customer);
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return item.PKID;
        }
        private void jobAutoAssignment(TransactionContext tc, Job item)
        {
            JobAssignment jobass = null;
            bool bvalid = false;
            try
            {
                while (bvalid != true)
                {
                    DateTime scheduledate = DateTime.Today;
                    long selectedemp = 0;
                    int minSlot = 1;
                    if (item.IssueDate.Hour > 15)
                    {
                        scheduledate = scheduledate.AddDays(1);
                        //     minSlot = item.IssueDate.Hour - 8;
                    }
                    else minSlot = item.IssueDate.Hour - 8;
                    string sql = SQLParser.MakeSQL(@"select employeeid, 0 maxSlot from employees 
                                    where employeetype =6  and distributorid =1162 and employeeid not in ( select distinct AssignedFFID from JobAssignment 
                                    where ScheduleDate = %d  
                                     )
                                    select AssignedFFID, max(ToSlot) maxSlot from JobAssignment 
                                                where ScheduleDate = %d and ToSlot > %n group by AssignedFFID having max(ToSlot) <6
                                                order by maxSlot", scheduledate, scheduledate, minSlot);

                    System.Data.DataSet odataset = tc.ExecuteDataSet(sql);
                    if (odataset != null && odataset.Tables.Count > 0 && odataset.Tables[0].Rows.Count > 0)
                    {
                        selectedemp = Convert.ToInt64(odataset.Tables[0].Rows[0][0].ToString());
                        if (DBNull.Value != odataset.Tables[0].Rows[0][1])
                            minSlot = Convert.ToInt32(odataset.Tables[0].Rows[0][1].ToString());
                        minSlot = minSlot + 1;
                    }
                    else
                    {
                        EmployeeDA oda = new EmployeeDA();
                        ObjectsTemplate<Employee> omp = oda.GetEmployee(item.BranchID, string.Empty, string.Empty, EmployeeTypeEnum.InstallationTeam, null, 0);
                        if (omp != null && omp.Count > 0) selectedemp = omp[0].PKID;
                    }

                    if (selectedemp != 0)
                    {
                        jobass = new JobAssignment();
                        jobass.AssignedFFID = selectedemp;
                        jobass.JobID = item.PKID;
                        jobass.AssignedFromFFID = selectedemp;
                        jobass.ScheduleDate = scheduledate;
                        jobass.FromSlot = minSlot;
                        if (item.JobTypeID == JobTypeEnum.NIR) jobass.ToSlot = minSlot + 1;
                        else jobass.ToSlot = minSlot;
                        jobass.AssignedTime = DateTime.Now;
                        jobass.StatusTime = DateTime.Now;
                        jobass.Status = EnumJobAssignmentStatus.Assigned;
                        jobass.CreatedDate = DateTime.Now;
                        jobass.CreatedBy = item.CreatedBy;
                        bvalid = true;
                        SaveJobAssignment(tc, jobass);
                    }
                    scheduledate = scheduledate.AddDays(1);

                }
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
        }


        //for mobile
        public long UpdateJob(Job item)
        {
            long id;
            try
            {
                var tc = TransactionContext.Begin(true, ServiceName);
                id = SaveJobHeader(tc, item);
                if (item.JobUpdates.Count != 0)
                {
                    foreach (var jobUpdate in item.JobUpdates ?? new ObjectsTemplate<JobUpdate>())
                    {
                        jobUpdate.JobID = id;
                        SaveJobUpdate(tc, jobUpdate);
                    }
                }
                UpdateJobHeader(tc, id);
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return id;
        }


        //for mobile
        public bool SaveJobUpdateForQrCode(ObjectsTemplate<JobUpdate> item)
        {
            TransactionContext tc = null;
            try
            {
                tc = TransactionContext.Begin(true, ServiceName);
                if (item.Count != 0)
                {
                    foreach (var jobUpdate in item ?? new ObjectsTemplate<JobUpdate>())
                    {
                        SaveJobUpdate(tc, jobUpdate);
                    }
                }
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return true;
        }

        public bool UpdateRescheduledJob(Job item)
        {
            TransactionContext tc = null;
            try
            {

                tc = TransactionContext.Begin(true, ServiceName);

                string query = SQLParser.MakeSQL(@"UPDATE Job SET RescheduleDate = %s,CustomerRemarks=%s WHERE JobID = %n",
                                     item.RescheduleDate, item.CustomerRemarks, item.PKID);
                tc.ExecuteNonQuery(query);
                tc.End();
                return true;
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
        }
        private void UpdateJobHeader(TransactionContext tc, long jobId)
        {
            try
            {
                tc.ExecuteNonQuery(@"UPDATE Job SET JobCode = %s WHERE JobID = %n", jobId.ToString(), jobId);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        private void SaveJobAttachment(TransactionContext tc, JobAttachment jobAttachment)
        {
            try
            {
                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, jobAttachment.JobID),
                    SqlHelperExtension.CreateInParam("@JobUpdateID", SqlDbType.Int, jobAttachment.JobUpdateID),
                    SqlHelperExtension.CreateInParam("@FileName", SqlDbType.VarChar, jobAttachment.FileName),
                    SqlHelperExtension.CreateInParam("@FileID", SqlDbType.VarChar, jobAttachment.FileID),
                    SqlHelperExtension.CreateOutParam("@JobAttachmentID", SqlDbType.Int, jobAttachment.PKID)
                };

                var procName = "[dbo].[InsertJobAttachment]";
                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());

                jobAttachment.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@JobAttachmentID").Value);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        private void SaveJobNotification(TransactionContext tc, JobNotification jobNotification)
        {
            try
            {
                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, jobNotification.JobID),
                    SqlHelperExtension.CreateInParam("@JobUpdateID", SqlDbType.Int, jobNotification.JobUpdateID),
                    SqlHelperExtension.CreateInParam("@FFID", SqlDbType.Int, jobNotification.FFID),
                    SqlHelperExtension.CreateInParam("@NotificationType", SqlDbType.Int, jobNotification.Type),
                    SqlHelperExtension.CreateInParam("@NotificationText", SqlDbType.VarChar, jobNotification.NotificationText),
                    SqlHelperExtension.CreateOutParam("@JobNotificationID", SqlDbType.Int, jobNotification.PKID)
                };

                var procName = "[dbo].[InsertJobNotification]";
                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());

                jobNotification.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@JobNotificationID").Value);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        private void SaveJobAssignment(TransactionContext tc, JobAssignment jobAssignment)
        {
            try
            {
                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, jobAssignment.JobID),
                    SqlHelperExtension.CreateInParam("@AssignedFromFFID", SqlDbType.Int, jobAssignment.AssignedFromFFID),
                    SqlHelperExtension.CreateInParam("@AssignedFFID", SqlDbType.Int, jobAssignment.AssignedFFID),
                    SqlHelperExtension.CreateInParam("@AssignedTime", SqlDbType.DateTime, jobAssignment.AssignedTime),
                    SqlHelperExtension.CreateInParam("@AssignmentStatus", SqlDbType.Int, jobAssignment.Status),
                    SqlHelperExtension.CreateInParam("@StatusTime", SqlDbType.DateTime, jobAssignment.StatusTime),
                    SqlHelperExtension.CreateInParam("@Remarks", SqlDbType.VarChar, jobAssignment.Remarks),
                    SqlHelperExtension.CreateInParam("@ScheduleDate", SqlDbType.DateTime, jobAssignment.ScheduleDate),
                    SqlHelperExtension.CreateInParam("@FromSlot", SqlDbType.Int, jobAssignment.FromSlot),
                    SqlHelperExtension.CreateInParam("@ToSlot", SqlDbType.Int, jobAssignment.ToSlot),
                    SqlHelperExtension.CreateOutParam("@JobAssignmentID", SqlDbType.Int, jobAssignment.PKID)

                };

                var procName = "[dbo].[InsertJobAssignment]";
                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());
                jobAssignment.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@JobAssignmentID").Value);
                SaveJobAssignmentHistory(tc, jobAssignment);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        private static void SaveJobAssignmentHistory(TransactionContext tc, JobAssignment jobAssignment)
        {
            try
            {
                tc.ExecuteNonQuery("Update JobAssignmentHistory set IsCuurentAssignment=0 where JobID=%n", jobAssignment.JobID);

                tc.ExecuteNonQuery("INSERT INTO dbo.JobAssignmentHistory " +
                                   "(JobID, AssignedFromFFID, AssignedFFID, AssignedTime, AssignmentStatus, StatusTime, Remarks, IsCuurentAssignment) VALUES " +
                                   "(%n,%n,%n,%d,%n,%D,%s, 1)", jobAssignment.JobID, jobAssignment.AssignedFromFFID, jobAssignment.AssignedFFID,
                                   jobAssignment.AssignedTime, jobAssignment.Status, jobAssignment.StatusTime, jobAssignment.Remarks);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }


        private void SaveConsignmentPickupDestination(TransactionContext tc, ConsignmentPickupDestination consignmentPickupDestination)
        {
            try
            {
                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, consignmentPickupDestination.JobID),
                    SqlHelperExtension.CreateInParam("@DestinationID", SqlDbType.Int, consignmentPickupDestination.DestinationID),
                    SqlHelperExtension.CreateInParam("@DestinationPostCodeID", SqlDbType.Int, consignmentPickupDestination.DestinationPostCodeID),
                    SqlHelperExtension.CreateInParam("@DestinationCityID", SqlDbType.Int, consignmentPickupDestination.DestinationCityID),
                    SqlHelperExtension.CreateInParam("@DestinationDistrictID", SqlDbType.Int, consignmentPickupDestination.DestinationDistrictID),
                    SqlHelperExtension.CreateInParam("@JobFor", SqlDbType.Int, consignmentPickupDestination.JobFor),
                    SqlHelperExtension.CreateOutParam("@ID", SqlDbType.Int, consignmentPickupDestination.PKID)
                };

                var procName = "[dbo].[InsertConsignmentPickupDestination]";
                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());

                consignmentPickupDestination.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@ID").Value);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        private void SaveCancelledJobLog(TransactionContext tc, CanceledJobLog cancelledJobLog)
        {
            try
            {
                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, cancelledJobLog.JobID),
                    SqlHelperExtension.CreateInParam("@AssignedFromFFID", SqlDbType.Int, cancelledJobLog.AssignedFromFFID),
                    SqlHelperExtension.CreateInParam("@AssignedFFID", SqlDbType.Int, cancelledJobLog.AssignedFFID),
                    SqlHelperExtension.CreateInParam("@CancelTime", SqlDbType.DateTime, cancelledJobLog.CancelTime),
                    SqlHelperExtension.CreateInParam("@RemarksID", SqlDbType.Int, cancelledJobLog.RemarksID),
                    SqlHelperExtension.CreateInParam("@Remarks", SqlDbType.VarChar, cancelledJobLog.Remarks),


                    SqlHelperExtension.CreateOutParam("@JobLogID", SqlDbType.Int, cancelledJobLog.PKID)

                };


                var procName = "[dbo].[InsertCancelledJobLog]";
                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());
                cancelledJobLog.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@JobLogID").Value);

            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        private void SaveJobUpdate(TransactionContext tc, JobUpdate jobUpdate)
        {
            try
            {
                if (jobUpdate.CategoryID == 21 || jobUpdate.CategoryID == 22 || jobUpdate.CategoryID == 25)
                {
                    tc.ExecuteNonQuery(@"Delete Jobupdate WHERE JobID = %n AND CategoryID= %n",
                                 jobUpdate.JobID, jobUpdate.CategoryID);
                }

                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@UpdateByFFID", SqlDbType.Int, jobUpdate.UpdateByFFID),
                    SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, jobUpdate.JobID),
                    SqlHelperExtension.CreateInParam("@UpdateTime", SqlDbType.DateTime, jobUpdate.UpdateTime),
                    SqlHelperExtension.CreateInParam("@Remarks", SqlDbType.VarChar, jobUpdate.Remarks),
                    SqlHelperExtension.CreateInParam("@RemarksID", SqlDbType.VarChar, jobUpdate.RemarksID),
                    SqlHelperExtension.CreateInParam("@Longitude", SqlDbType.VarChar, jobUpdate.Longitude),
                    SqlHelperExtension.CreateInParam("@Latitude", SqlDbType.VarChar, jobUpdate.Latitude),
                    SqlHelperExtension.CreateInParam("@Location", SqlDbType.VarChar, jobUpdate.Location),
                    SqlHelperExtension.CreateInParam("@CategoryID", SqlDbType.Int, jobUpdate.CategoryID),
                    SqlHelperExtension.CreateInParam("@IsJobChanged", SqlDbType.Int, jobUpdate.IsJobChanged),
                    SqlHelperExtension.CreateOutParam("@JobUpdateID", SqlDbType.Int, jobUpdate.PKID)
                };

                var procName = "[dbo].[InsertJobUpdate]";
                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());

                jobUpdate.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@JobUpdateID").Value);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }


        public void JobsRemarksUpdate(JobUpdate jobUpdate)
        {
            var tc = TransactionContext.Begin(ServiceName);
            try
            {
                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@UpdateByFFID", SqlDbType.Int, jobUpdate.UpdateByFFID),
                    SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, jobUpdate.JobID),
                    SqlHelperExtension.CreateInParam("@UpdateTime", SqlDbType.DateTime, jobUpdate.UpdateTime.Date),
                    SqlHelperExtension.CreateInParam("@Remarks", SqlDbType.VarChar, jobUpdate.Remarks),
                    SqlHelperExtension.CreateOutParam("@JobUpdateID", SqlDbType.Int, jobUpdate.PKID)
                };


                var procName = "[dbo].[InsertJobUpdate]";
                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());

                jobUpdate.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@JobUpdateID").Value);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        private void UpdateConsignmentItemStatus(TransactionContext tc, Job item)
        {
            try
            {
                if (item.ConsignmentItemID != null)
                {
                    tc.ExecuteNonQuery(@"UPDATE ConsignmentItem
                                    SET Status = %n
                                    WHERE ConsignmentItemID = %n",
                                        (int)EnumConsignmentItemStatus.Delivery_Runsheet_Assigned,
                                        item.ConsignmentItemID);
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        public void CancelJob(long jobID, string cancelReason)
        {
            TransactionContext tc = null;
            try
            {
                DateTime statusTime = DateTime.Now;
                tc = TransactionContext.Begin(true, ServiceName);
                tc.ExecuteNonQuery(@"UPDATE Job
                                    SET Status = %n, CancelReason = %s
                                    WHERE JobID = %n",
                                    (int)EnumJobStatus.Reject, cancelReason,
                                    jobID);
                tc.End();
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }
        }

        public void UpdateJobAssignmentStatus(string jobIDs, EnumJobAssignmentStatus assignmentStatus, DateTime? assignedDate, string remarks, long? assignedFromFFID, long? AssignedFFID, long? CustomerRemarksID, EnumConsignmentItemStatus? consignmentItemStatus, string collectorName, string collectorPhone, string collectorAddress, decimal paymentAmount, long? deliveredBy, int fromSlot, int toSlot, string finalFromTime, string finalToTime,
            decimal? longitude, decimal? latitute, string location,
            decimal? CollectableAmount, string SpecialInstruction, int IsJobChanged, string NewDoa, string OldDoa, string QrCode, string InstallerRemarks)
        {
            TransactionContext tc = null;
            try
            {
                DateTime statusTime = DateTime.Now;
                tc = TransactionContext.Begin(true, ServiceName);
                UpdateJobAssignmentStatus(tc, jobIDs, assignmentStatus, assignedDate, remarks, assignedFromFFID, AssignedFFID, CustomerRemarksID, fromSlot, toSlot, finalFromTime, finalToTime, longitude, latitute, location,
                    CollectableAmount, SpecialInstruction, IsJobChanged, NewDoa, OldDoa, QrCode, InstallerRemarks);

                tc.End();
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }
        }

        public void UpdateJobAssignmentStatusAngular(string jobIDs, EnumJobAssignmentStatus assignmentStatus, DateTime? assignedDate, string remarks, long? assignedFromFFID, long? AssignedFFID, long? CustomerRemarksID, EnumConsignmentItemStatus? consignmentItemStatus, string collectorName, string collectorPhone, string collectorAddress, decimal paymentAmount, long? deliveredBy, int fromSlot, int toSlot, string finalFromTime, string finalToTime,
          decimal? longitude, decimal? latitute, string location,
          decimal? CollectableAmount, string SpecialInstruction, int IsJobChanged, string NewDoa, string OldDoa, string QrCode, string InstallerRemarks)
        {
            TransactionContext tc = null;
            try
            {
                DateTime statusTime = DateTime.Now;
                tc = TransactionContext.Begin(true, ServiceName);
                UpdateJobAssignmentStatusAngular(tc, jobIDs, assignmentStatus, assignedDate, remarks, assignedFromFFID, AssignedFFID, CustomerRemarksID, fromSlot, toSlot, finalFromTime, finalToTime, longitude, latitute, location,
                    CollectableAmount, SpecialInstruction, IsJobChanged, NewDoa, OldDoa, QrCode, InstallerRemarks);

                tc.End();
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }
        }

        public ObjectsTemplate<JobDetailReport> GetJobDetailsReport(DateTime? fromDate, DateTime? toDate, long? distributorID)
        {
            ObjectsTemplate<JobDetailReport> items;
            string whereCaluse = string.Empty;
            //if (fromDate != null)
            //{
            //    // CAST(c.PUTime as DATE) >= Cast(% d as DATE)", fromDate.Value
            //    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= CAST(%d as Date)", fromDate.Value);
            //}

            //if (toDate != null)
            //{
            //    subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) <= CAST(%d as Date) ", toDate.Value);
            //}
            //subquery = SQLParser.TagSQL(subquery) + SQLParser.MakeSQL("j.distributorID = %n ", distributorID);
            if (fromDate != null && fromDate.HasValue)
                whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) >= CAST(%d as Date)", fromDate.Value);

            if (toDate != null && toDate.HasValue)
                whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("CAST(j.CreatedDate as Date) <= CAST(%d as Date) ", toDate.Value);

            if (distributorID > 0 && distributorID != null)
                whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("j.distributorID = %n", distributorID);
            //if (distributorID > 0 && distributorID != null)
            //    whereCaluse = SQLParser.TagSQL(whereCaluse) + SQLParser.MakeSQL("bp1.bpid = %n ", distributorID);
            try
            {
                var tc = TransactionContext.Begin(ServiceName);

                //string query = SQLParser.MakeSQL(@"SELECT j.JobID, si.SubscriberId, bp.enlistmentno RetailerCode,
                //                                   bp.NAME RetailerName,bp1.enlistmentno DistributorCode,
                //                                   bp1.NAME DistributorName,bp2.enlistmentno iDistributorCode,
                //                                   bp2.NAME iDistributorName,bp3.ownermobile CustomerMobile,
                //                                   bp3.NAME CustomerName,j.CustomerNID,j.CustomerDOB,
                //                                   j.createddate SubDate,CONVERT(VARCHAR(10), j.createddate, 108) AS SubTime,
                //                                   CASE j.gender
                //                                     WHEN 1 THEN 'Male'
                //                                     WHEN 2 THEN 'Female'
                //                                     WHEN 3 THEN 'Other'
                //                                   END Gender, t.NAME Thana, d.NAME District,j.Roadno,j.Houseno, j.Landmark,
                //                                   CASE j.cpe
                //                                      WHEN 1 THEN 'CPE Full'
                //                                      WHEN 2 THEN 'CPE STB Only'
                //                                      WHEN 3 THEN 'STB Only'
                //                                   END  CPE,Division='',Area=''
                //                                   FROM  job j
                //                                   LEFT JOIN SalesInvoice AS si ON j.ReferenceID=si.InvoiceID 
                //                                        LEFT JOIN businesspartner AS bp ON j.dealerid = bp.bpid
                //                                        LEFT JOIN businesspartner AS bp1 ON bp.parentid = bp1.bpid
                //                                        LEFT JOIN businesspartner AS bp2 ON j.distributorid = bp2.bpid
                //                                        LEFT JOIN businesspartner AS bp3 ON j.customerid = bp3.bpid
                //                                        LEFT JOIN thana AS t ON t.thanaid = j.thanaid
                //                                        LEFT JOIN district AS d ON t.districtid = d.districtid 
                //                                   %q", whereCaluse);

                string query = SQLParser.MakeSQL(@"SELECT j.JobID, si.SubscriberId, bp.enlistmentno RetailerCode,
                                                   bp.NAME RetailerName,bp1.enlistmentno DistributorCode,
                                                   bp1.NAME DistributorName,bp2.enlistmentno iDistributorCode,
                                                   bp2.NAME iDistributorName,bp3.ownermobile CustomerMobile,
                                                   bp3.NAME CustomerName,j.CustomerNID,j.CustomerDOB,sss.SerialNo STBSerial,
                                                   j.createddate SubDate,CONVERT(VARCHAR(10), j.createddate, 108) AS SubTime,
                                                   CASE j.gender
                                                     WHEN 1 THEN 'Male'
                                                     WHEN 2 THEN 'Female'
                                                     WHEN 3 THEN 'Other'
                                                   END Gender, t.NAME Thana, d.NAME District,j.Roadno,j.Houseno, j.Landmark,
                                                   CASE j.cpe
                                                      WHEN 1 THEN 'CPE Full'
                                                      WHEN 2 THEN 'CPE STB Only'
                                                      WHEN 3 THEN 'STB Only'
                                                   END  CPE,Division='',Area=''
                                                   FROM  job j
                                                   INNER JOIN SalesInvoice AS si ON j.ReferenceID=si.InvoiceID 
                                                   INNER JOIN InvoiceLineItem AS ili ON si.InvoiceID = ili.InvoiceID
                                                   INNER JOIN InvoiceLineItemSerial AS ilis ON si.InvoiceID = ilis.InvoiceID  AND ili.InvoiceLineItemID = ilis.InvoiceLineItemID
                                                   INNER JOIN skubatchstockserial AS sss ON sss.SKUSerialID = ilis.SerialID AND sss.SKUBatchID = ilis.SKUBatchID
                                                   INNER JOIN businesspartner AS bp ON j.dealerid = bp.bpid and bp.Category=%n
                                                   INNER JOIN businesspartner AS bp1 ON bp.parentid = bp1.bpid and bp1.Category=%n
                                                  -- LEFT JOIN businesspartner AS bp2 ON bp1.bpid = bp2.bpid
                                                   LEFT JOIN businesspartner AS bp2 ON bp2.bpid = j.DistributorID
                                                   LEFT JOIN businesspartner AS bp3 ON j.customerid = bp3.bpid and bp3.Category=%n
                                                   LEFT JOIN thana AS t ON t.thanaid = j.thanaid
                                                   LEFT JOIN district AS d ON t.districtid = d.districtid 
                                                   %q", (int)BPCategoryEnum.Dealer, (int)BPCategoryEnum.Distributor, (int)BPCategoryEnum.Customer, whereCaluse);
                DataReader dr = new DataReader(tc.ExecuteReader(query));
                items = new ObjectsTemplate<JobDetailReport>();
                while (dr.Read())
                {
                    JobDetailReport item = new JobDetailReport();

                    item.SubscriberID = dr.GetString("SubscriberId", true, null);
                    item.SubDate = (DateTime)dr.GetDateTime("SubDate");
                    item.SubTime = dr.GetString("SubTime", true, null);
                    item.RetailerCode = dr.GetString("RetailerCode", true, null);
                    item.RetailerName = dr.GetString("RetailerName", true, null);
                    item.DistributorCode = dr.GetString("DistributorCode", true, null);
                    item.DistributorName = dr.GetString("DistributorName", true, null);
                    item.iDistributorCode = dr.GetString("iDistributorCode", true, null);
                    item.iDistributorName = dr.GetString("iDistributorName", true, null);
                    item.CustomerMobile = dr.GetString("CustomerMobile", true, null);
                    item.CustomerName = dr.GetString("CustomerName", true, null);
                    item.CustomerNID = dr.GetString("CustomerNID", true, null);
                    item.CustomerDOB = dr.GetDateTime("CustomerDOB", true, DateTime.MinValue);
                    item.Gender = dr.GetString("Gender", true, null);
                    item.Division = dr.GetString("Division", true, null);
                    item.Thana = dr.GetString("Thana", true, null);
                    item.District = dr.GetString("District", true, null);
                    item.Area = dr.GetString("Area", true, null);
                    item.RoadNo = dr.GetString("RoadNo", true, null);
                    item.HouseNo = dr.GetString("HouseNo", true, null);
                    item.Landmark = dr.GetString("Landmark", true, null);
                    item.CPE = dr.GetString("CPE", true, null);
                    item.STBSerial = dr.GetString("STBSerial", true, null);
                    items.Add(item);
                }
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return items;
        }

        public string CancelJobList(List<Job> jobs)
        {
            TransactionContext tc = null;
            try
            {
                tc = TransactionContext.Begin(true, ServiceName);
                string jobids = string.Join(",", jobs.Select(C => C.PKID).Distinct().ToList());
                string remarks = "Inactive Team";
                //SqlParameter[] p = null;
                //string sql = string.Empty;

                //p = new SqlParameter[2];
                //p[0] = new SqlParameter("@JobIDs", jobids);
                //p[1] = new SqlParameter("@Remarks", remarks);

                var query = SQLParser.MakeSQL(@"Delete From JobAssignment WHERE JobID IN (SELECT * from STRING_TO_INT_Table(%s))", jobids);
                tc.ExecuteNonQuery(query);


                var query1 = SQLParser.MakeSQL(@"Update Job set Status = %n, CancelReason = %s WHERE JobID IN (SELECT * from STRING_TO_INT_Table(%s))",
                    EnumJobAssignmentStatus.Cancel, remarks, jobids);
                tc.ExecuteNonQuery(query1);

                foreach (var job in jobs)
                {
                    CanceledJobLog cancelledJobLog = new CanceledJobLog();
                    cancelledJobLog.JobID = job.PKID;
                    cancelledJobLog.AssignedFFID = job.AssignedFFID;
                    cancelledJobLog.AssignedFromFFID = User.CurrentUser.PKID;
                    cancelledJobLog.Remarks = remarks;
                    cancelledJobLog.RemarksID = 0;
                    cancelledJobLog.CancelTime = DateTime.Now;
                    SaveCancelledJobLog(tc, cancelledJobLog);
                }
                tc.End();
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }

            return "ok";
        }

        public void UpdateJobAssignmentStatus(TransactionContext tc, string jobIDs, EnumJobAssignmentStatus assignmentStatus, DateTime? assignedDate, string remarks, long? assignedFromFFID, long? AssignedFFID, long? CustomerRemarksID, int fromSlot, int toSlot, string finalFromTime, string finalToTime, decimal? longitude, decimal? latitute, string location, decimal? CollectableAmount,
            string SpecialInstruction, int IsJobChanged, string NewDOA, string OldDOA, string QrCode, string InstallerRemarks)
        {
            try
            {
                #region Declarations
                DateTime date = (DateTime)assignedDate;
                var slotDate = date.ToShortDateString();
                var separator = " ";
                string slotFinalDate1 = String.Concat(slotDate, separator, finalFromTime);
                string slotFinalDate2 = String.Concat(slotDate, separator, finalToTime);
                var IsAutoAssignment = 0;
                //DateTime oDate = DateTime.ParseExact(slotFinalDate, "yyyy-MM-dd HH:mm tt", null);

                DateTime statusTime = DateTime.Now;
                SqlParameter[] p = null;
                string sql = string.Empty;
                p = new SqlParameter[19];
                p[0] = new SqlParameter("@JobIDs", jobIDs);
                p[1] = new SqlParameter("@AssignedFFID", AssignedFFID);
                p[2] = new SqlParameter("@AssignedDate", assignedDate);
                p[3] = new SqlParameter("@AssignmentStatus", assignmentStatus);
                p[4] = new SqlParameter("@AssignStatusTime", statusTime);
                p[5] = new SqlParameter("@AssignedFromFFID", assignedFromFFID);
                p[6] = new SqlParameter("@CustomerRemarksID", null);
                p[7] = new SqlParameter("@Remarks", string.IsNullOrWhiteSpace(remarks) ? "" : remarks);
                p[8] = new SqlParameter("@FromSlot", fromSlot);
                p[9] = new SqlParameter("@ToSlot", toSlot);
                p[10] = new SqlParameter("@slotFinalDate1", slotFinalDate1);
                p[11] = new SqlParameter("@slotFinalDate2", slotFinalDate2);
                p[12] = new SqlParameter("@CollectableAmount", CollectableAmount);
                p[13] = new SqlParameter("@SpecialInstruction", SpecialInstruction);
                p[14] = new SqlParameter("@IsAutoAssignment", IsAutoAssignment);
                p[15] = new SqlParameter("@NewDOA", NewDOA);
                p[16] = new SqlParameter("@OldDOA", OldDOA);
                p[17] = new SqlParameter("@QrCode", QrCode);
                p[18] = new SqlParameter("@InstallerRemarks", InstallerRemarks);
                #endregion

                #region JobAssignment

                if (assignmentStatus == EnumJobAssignmentStatus.Assigned)
                {
                    sql = @"UPDATE JobAssignment SET " +
                            "AssignedFromFFID = @AssignedFromFFID, AssignedFFID  =@AssignedFFID , AssignedTime = @AssignedDate, AssignmentStatus = @AssignmentStatus, StatusTime = @AssignStatusTime,CustomerRemarksID= @CustomerRemarksID, FromSlot=@FromSlot,ToSlot=@ToSlot, " +
                            "Remarks = @Remarks " +
                            "WHERE JobID IN (SELECT jj.JobID FROM Job jj INNER JOIN JobAssignment ja ON jj.JobID = ja.JobID " +
                            "WHERE jj.JobID IN(SELECT * from STRING_TO_INT_Table(@JobIDs)))";
                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    sql = "INSERT INTO JobAssignment(JobID,AssignedFromFFID,AssignedFFID,AssignedTime,AssignmentStatus,StatusTime,CustomerRemarksID,Remarks,FromSlot,ToSlot)" +
                           "SELECT j.JobID,@AssignedFromFFID,@AssignedFFID,@AssignedDate,@AssignmentStatus,@AssignStatusTime,@CustomerRemarksID,@Remarks,@FromSlot,@ToSlot from " +
                           "(SELECT jj.* FROM Job jj Left JOIN JobAssignment ja ON jj.JobID = ja.JobID " +
                           "WHERE jj.JobID IN(SELECT * from STRING_TO_INT_Table(@JobIDs)) AND ja.JobID IS NULL) j";

                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    sql = @"UPDATE Job SET Status= @AssignmentStatus, " +
                           "StartDateTime = (SELECT convert(datetime,@slotFinalDate1))," +
                           "EndDateTime = (SELECT convert(datetime,@slotFinalDate2)), " +
                           "IsAutoAssignment=@IsAutoAssignment " +
                           "WHERE JobID IN(SELECT * from STRING_TO_INT_Table(@JobIDs))";
                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                }
                else if (assignmentStatus == EnumJobAssignmentStatus.UnAssigned)
                {
                    sql = @"Delete From JobAssignment WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs)) ";
                    tc.ExecuteNonQuery(CommandType.Text, sql, p);
                }
                else if (assignmentStatus == EnumJobAssignmentStatus.Cancel)
                {
                    sql = @"Delete From JobAssignment WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs)) ";
                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    //sql = @"Update Job set Status =%n, CancelReason=%s WHERE JobID IN (%s)";
                    //tc.ExecuteNonQuery(CommandType.Text, sql, EnumJobAssignmentStatus.Rejected, remarks, jobIDs);
                    //var query = SQLParser.MakeSQL(@"Update Job set Status = %n, CancelReason = %s,StartDateTime=NULL,EndDateTime=NULL WHERE JobID IN (SELECT * from STRING_TO_INT_Table(%s))",
                    //    EnumJobAssignmentStatus.Rejected, remarks, jobIDs);
                    var query = SQLParser.MakeSQL(@"Update Job set Status = %n, CancelReason = %s WHERE JobID IN (SELECT * from STRING_TO_INT_Table(%s))",
                        EnumJobAssignmentStatus.Cancel, remarks, jobIDs);
                    tc.ExecuteNonQuery(query);


                    //string[] jobcancelIds = jobIDs.Split(',');
                    //foreach(var itm in jobcancelIds)
                    //{
                    //    tc.ExecuteNonQuery("INSERT INTO dbo.CanceledJobLog " +
                    //              "(JobID, AssignedFFID, RemarksID, Remarks, CancelTime, AssignedFromFFID) VALUES " +
                    //              "(%n,%n,%n,%s,%D,%n)",Convert.ToInt64(itm), AssignedFFID,
                    //              CustomerRemarksID, remarks, DateTime.Now, assignedFromFFID);
                    //}

                    tc.ExecuteNonQuery("INSERT INTO dbo.CanceledJobLog " +
                                   "(JobID, AssignedFFID, RemarksID, Remarks, CancelTime, AssignedFromFFID) VALUES " +
                                   "(%n,%n,%n,%s,%D,%n)", jobIDs, AssignedFFID,
                                   CustomerRemarksID, remarks, DateTime.Now, assignedFromFFID);
                }
                else // Received = 2, Rejected = 3, Completed = 4, PendingPickupReceive = 6, PendingDeliveryRetrurn = 7
                {

                    sql = @"UPDATE JobAssignment SET AssignmentStatus = @AssignmentStatus,StatusTime = @AssignStatusTime,
                            CustomerRemarksID=@CustomerRemarksID,REMARKS = @Remarks WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs))";

                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    sql = @"UPDATE Job SET Status = @AssignmentStatus,CancelReason = @Remarks, CollectableAmount=@CollectableAmount,SpecialInstruction=@SpecialInstruction,NewDOA=@NewDOA,OldDOA=@OldDOA,InstallerRemarks=@InstallerRemarks WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs))";

                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    if (QrCode != string.Empty)
                    {
                        sql = @"UPDATE Job SET QrCode=@QrCode WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs))";
                        tc.ExecuteNonQuery(CommandType.Text, sql, p);
                    }



                    //var query = SQLParser.MakeSQL(@"Update Job set Status = @AssignmentStatus, CancelReason = %s WHERE JobID IN (SELECT * from STRING_TO_INT_Table(%s))",
                    //        remarks, jobIDs);
                    // tc.ExecuteNonQuery(query);
                }

                #endregion

                #region JobAssignmentHistory

                sql = "Update JobAssignmentHistory set IsCuurentAssignment=0 " +
                      "Where JobID in (SELECT * from STRING_TO_INT_Table(@JobIDs))";

                tc.ExecuteNonQuery(CommandType.Text, sql, p);

                sql = @"INSERT INTO JobAssignmentHistory(JobID,AssignedFromFFID,AssignedFFID,AssignedTime,AssignmentStatus,StatusTime,CustomerRemarksID,Remarks,IsCuurentAssignment) " +
                            "Select j.JobID,j.AssignedFromFFID,j.AssignedFFID,j.AssignedTime,j.AssignmentStatus,j.StatusTime,j.CustomerRemarksID,j.Remarks,1 " +
                            "from JobAssignment j WHERE JobID IN(SELECT * from STRING_TO_INT_Table(@JobIDs))";

                tc.ExecuteNonQuery(CommandType.Text, sql, p);

                #endregion

                #region JobUpdate
                string updateJobQuery = string.Empty;
                updateJobQuery = SQLParser.MakeSQL(@"INSERT INTO JobUpdate (UpdateByFFID,JobID,UpdateTime,Remarks,RemarksID,Longitude,Latitude,Location,IsJobChanged) VALUES (%n,%n,%D,%s,%n,%n,%n,%s,%n)", AssignedFFID, jobIDs, DateTime.Now, remarks, CustomerRemarksID, longitude, latitute, location, IsJobChanged);


                tc.ExecuteNonQuery(updateJobQuery);
                #endregion

                #region JobUpdateWhile reschedule,resassign,cancel
                if (IsJobChanged == 1)
                {
                    string updateJobQueryForChange = string.Empty;
                    updateJobQueryForChange = SQLParser.MakeSQL(@"UPDATE JobUpdate set IsJobChanged = 1 where JobID =%n", jobIDs);
                    tc.ExecuteNonQuery(updateJobQueryForChange);
                }
                #endregion
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        public void UpdateJobAssignmentStatusAngular(TransactionContext tc, string jobIDs, EnumJobAssignmentStatus assignmentStatus, DateTime? assignedDate, string remarks, long? assignedFromFFID, long? AssignedFFID, long? CustomerRemarksID, int fromSlot, int toSlot, string finalFromTime, string finalToTime, decimal? longitude, decimal? latitute, string location, decimal? CollectableAmount,
        string SpecialInstruction, int IsJobChanged, string NewDOA, string OldDOA, string QrCode, string InstallerRemarks)
        {
            try
            {
                #region Declarations
                DateTime date = (DateTime)assignedDate;
                var slotDate = date.ToShortDateString();
                var separator = " ";
                string slotFinalDate1 = String.Concat(slotDate, separator, finalFromTime);
                string slotFinalDate2 = String.Concat(slotDate, separator, finalToTime);
                var IsAutoAssignment = 0;
              
                DateTime statusTime = DateTime.Now;
                SqlParameter[] p = null;
                string sql = string.Empty;
                p = new SqlParameter[19];
                p[0] = new SqlParameter("@JobIDs", jobIDs);
                p[1] = new SqlParameter("@AssignedFFID", AssignedFFID);
                p[2] = new SqlParameter("@AssignedDate", assignedDate);
                p[3] = new SqlParameter("@AssignmentStatus", assignmentStatus);
                p[4] = new SqlParameter("@AssignStatusTime", statusTime);
                p[5] = new SqlParameter("@AssignedFromFFID", assignedFromFFID);
                p[6] = new SqlParameter("@CustomerRemarksID", null);
                p[7] = new SqlParameter("@Remarks", string.IsNullOrWhiteSpace(remarks) ? "" : remarks);
                p[8] = new SqlParameter("@FromSlot", fromSlot);
                p[9] = new SqlParameter("@ToSlot", toSlot);
                p[10] = new SqlParameter("@slotFinalDate1", slotFinalDate1);
                p[11] = new SqlParameter("@slotFinalDate2", slotFinalDate2);
                p[12] = new SqlParameter("@CollectableAmount", CollectableAmount);
                p[13] = new SqlParameter("@SpecialInstruction", SpecialInstruction);
                p[14] = new SqlParameter("@IsAutoAssignment", IsAutoAssignment);
                p[15] = new SqlParameter("@NewDOA", NewDOA);
                p[16] = new SqlParameter("@OldDOA", OldDOA);
                p[17] = new SqlParameter("@QrCode", QrCode);
                p[18] = new SqlParameter("@InstallerRemarks", InstallerRemarks);
                #endregion

                #region JobAssignment

                if (assignmentStatus == EnumJobAssignmentStatus.Assigned)
                {
                    sql = @"UPDATE JobAssignment SET " +
                            "AssignedFromFFID = @AssignedFromFFID, AssignedFFID  =@AssignedFFID , AssignedTime = @AssignedDate, AssignmentStatus = @AssignmentStatus, StatusTime = @AssignStatusTime,CustomerRemarksID= @CustomerRemarksID, FromSlot=@FromSlot,ToSlot=@ToSlot, " +
                            "Remarks = @Remarks " +
                            "WHERE JobID IN (SELECT jj.JobID FROM Job jj INNER JOIN JobAssignment ja ON jj.JobID = ja.JobID " +
                            "WHERE jj.JobID IN(SELECT * from STRING_TO_INT_Table(@JobIDs)))";
                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    sql = "INSERT INTO JobAssignment(JobID,AssignedFromFFID,AssignedFFID,AssignedTime,AssignmentStatus,StatusTime,CustomerRemarksID,Remarks,FromSlot,ToSlot)" +
                           "SELECT j.JobID,@AssignedFromFFID,@AssignedFFID,@AssignedDate,@AssignmentStatus,@AssignStatusTime,@CustomerRemarksID,@Remarks,@FromSlot,@ToSlot from " +
                           "(SELECT jj.* FROM Job jj Left JOIN JobAssignment ja ON jj.JobID = ja.JobID " +
                           "WHERE jj.JobID IN(SELECT * from STRING_TO_INT_Table(@JobIDs)) AND ja.JobID IS NULL) j";

                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    sql = @"UPDATE Job SET Status= @AssignmentStatus, " +
                           "StartDateTime = (SELECT convert(datetime,@slotFinalDate1))," +
                           "EndDateTime = (SELECT convert(datetime,@slotFinalDate2)), " +
                           "IsAutoAssignment=@IsAutoAssignment " +
                           "WHERE JobID IN(SELECT * from STRING_TO_INT_Table(@JobIDs))";
                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                }
                else if (assignmentStatus == EnumJobAssignmentStatus.UnAssigned)
                {
                    sql = @"Delete From JobAssignment WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs)) ";
                    tc.ExecuteNonQuery(CommandType.Text, sql, p);
                }
                else if (assignmentStatus == EnumJobAssignmentStatus.Cancel)
                {
                    sql = @"Delete From JobAssignment WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs)) ";
                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    var query = SQLParser.MakeSQL(@"Update Job set Status = %n, CancelReason = %s WHERE JobID IN (SELECT * from STRING_TO_INT_Table(%s))",
                        EnumJobAssignmentStatus.Cancel, remarks, jobIDs);
                    tc.ExecuteNonQuery(query);


                    tc.ExecuteNonQuery("INSERT INTO dbo.CanceledJobLog " +
                                   "(JobID, AssignedFFID, RemarksID, Remarks, CancelTime, AssignedFromFFID) VALUES " +
                                   "(%n,%n,%n,%s,%D,%n)", jobIDs, AssignedFFID,
                                   CustomerRemarksID, remarks, DateTime.Now, assignedFromFFID);
                }
                else // Received = 2, Rejected = 3, Completed = 4, PendingPickupReceive = 6, PendingDeliveryRetrurn = 7
                {

                    sql = @"UPDATE JobAssignment SET AssignmentStatus = @AssignmentStatus,StatusTime = @AssignStatusTime,
                            CustomerRemarksID=@CustomerRemarksID,REMARKS = @Remarks WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs))";

                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    sql = @"UPDATE Job SET Status = @AssignmentStatus,CancelReason = @Remarks, CollectableAmount=@CollectableAmount,SpecialInstruction=@SpecialInstruction,NewDOA=@NewDOA,OldDOA=@OldDOA,InstallerRemarks=@InstallerRemarks WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs))";

                    tc.ExecuteNonQuery(CommandType.Text, sql, p);

                    if (QrCode != string.Empty)
                    {
                        sql = @"UPDATE Job SET QrCode=@QrCode WHERE JobID IN (SELECT * from STRING_TO_INT_Table(@JobIDs))";
                        tc.ExecuteNonQuery(CommandType.Text, sql, p);
                    }


                }

                #endregion

                #region JobAssignmentHistory

                sql = "Update JobAssignmentHistory set IsCuurentAssignment=0 " +
                      "Where JobID in (SELECT * from STRING_TO_INT_Table(@JobIDs))";

                tc.ExecuteNonQuery(CommandType.Text, sql, p);

                sql = @"INSERT INTO JobAssignmentHistory(JobID,AssignedFromFFID,AssignedFFID,AssignedTime,AssignmentStatus,StatusTime,CustomerRemarksID,Remarks,IsCuurentAssignment) " +
                            "Select j.JobID,j.AssignedFromFFID,j.AssignedFFID,j.AssignedTime,j.AssignmentStatus,j.StatusTime,j.CustomerRemarksID,j.Remarks,1 " +
                            "from JobAssignment j WHERE JobID IN(SELECT * from STRING_TO_INT_Table(@JobIDs))";

                tc.ExecuteNonQuery(CommandType.Text, sql, p);

                #endregion
                #region JobUpdateWhile reschedule,resassign,cancel
                if (IsJobChanged == 1)
                {
                    string updateJobQueryForChange = string.Empty;
                    updateJobQueryForChange = SQLParser.MakeSQL(@"UPDATE JobUpdate set IsJobChanged = 1 where JobID =%n", jobIDs);
                    tc.ExecuteNonQuery(updateJobQueryForChange);
                    IsJobChanged = 0;
                }
                #endregion

                #region JobUpdate
                string updateJobQuery = string.Empty;
                updateJobQuery = SQLParser.MakeSQL(@"INSERT INTO JobUpdate (UpdateByFFID,JobID,UpdateTime,Remarks,RemarksID,Longitude,Latitude,Location,IsJobChanged) VALUES (%n,%n,%D,%s,%n,%n,%n,%s,%n)", AssignedFFID, jobIDs, DateTime.Now, remarks, CustomerRemarksID, longitude, latitute, location, IsJobChanged);
                tc.ExecuteNonQuery(updateJobQuery);
                #endregion
             
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }



        public bool UpdateJobStatus(long jobID, EnumJobStatus JobStatus, string Remarks, string CancelReason, long? distributorId, string subscriberId, long? userId, long? JobIdOfSubscriberId)
        {

            TransactionContext tc = null;

            try
            {
                DateTime statusTime = DateTime.Now;
                var currentJob = GetJobByID(jobID);

                //if (currentJob.AssignedTime.Value.Date != DateTime.Now.Date && JobStatus == EnumJobStatus.Received)
                //{
                //    throw new Exception("You cannot receive future job.");
                //}

                tc = TransactionContext.Begin(true, ServiceName);


                string query = string.Empty;

                if (JobStatus == EnumJobStatus.ForwardToSales)
                {
                    query = SQLParser.MakeSQL(@"UPDATE Job SET Status = %n, Remarks= %s WHERE JobID = %n AND Status<>%n", JobStatus, Remarks, jobID, (int)EnumJobStatus.SalesConfirm);
                }
                else if (JobStatus == EnumJobStatus.ForwardToCorporate || JobStatus == EnumJobStatus.Reschedule)
                {
                    query = SQLParser.MakeSQL(@"UPDATE Job SET Status = %n, Remarks= %s WHERE JobID = %n AND Status<>%n", JobStatus, currentJob.Remarks, jobID, (int)EnumJobStatus.SalesConfirm);
                }
                else if (JobStatus == EnumJobStatus.ForwardToDistributor)
                    query = SQLParser.MakeSQL(@"UPDATE Job SET Status = %n,Remarks= %s, DistributorID = %n WHERE JobID = %n AND Status<>%n", JobStatus, currentJob.Remarks, distributorId, jobID, (int)EnumJobStatus.SalesConfirm);

                else if (JobStatus == EnumJobStatus.SalesConfirm)
                {
                    query = SQLParser.MakeSQL(@"UPDATE Job SET Status = %n, SubscriberId = %s, ConfirmedBy = %n, ConfirmedDate = %s WHERE JobID = %n", JobStatus, subscriberId, userId, DateTime.Now, jobID);

                    string cmd = SQLParser.MakeSQL(@"UPDATE Job SET IsSubscriberIdInLead = %b WHERE JobID = %n", true, JobIdOfSubscriberId);
                    tc.ExecuteNonQuery(cmd);
                }
                else if (JobStatus == EnumJobStatus.SalesReject)
                {
                    query = SQLParser.MakeSQL(@"UPDATE Job SET Status = %n, CancelReason= %s, RejectedBy = %n, RejectedDate = %s WHERE JobID = %n AND Status<>%n AND ConfirmedBy IS NULL", JobStatus, CancelReason, userId, DateTime.Now, jobID, (int)EnumJobStatus.SalesConfirm);
                }
                else if (JobStatus == EnumJobStatus.Rejected)
                {
                    query = SQLParser.MakeSQL(@"UPDATE Job SET Status = %n, CancelReason= %s, ModifiedBy = %n, ModifiedDate = %s WHERE JobID = %n AND Status<>%n", JobStatus, CancelReason, userId, DateTime.Now, jobID, (int)EnumJobStatus.SalesConfirm);
                }
                else
                    query = SQLParser.MakeSQL(@"UPDATE Job SET Status = %n, ModifiedBy = %n, ModifiedDate = %s WHERE JobID = %n AND Status<>%n", JobStatus, userId, DateTime.Now, jobID, (int)EnumJobStatus.SalesConfirm);



                tc.ExecuteNonQuery(query);

                tc.End();

                return true;
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }
        }


        public bool UpdatePaymentStatus(long jobID, bool isPaymentDone, long? userId)
        {
            TransactionContext tc = null;
            try
            {
                tc = TransactionContext.Begin(true, ServiceName);
                string query = string.Empty;

                query = SQLParser.MakeSQL(@"UPDATE Job SET IsPaymentDone = %b, PaymentConfirmedBy = %n, PaymentConfirmedDate = %s WHERE JobID = %n", isPaymentDone, userId, DateTime.Now, jobID);

                tc.ExecuteNonQuery(query);
                tc.End();

                return true;
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }
        }
        public bool UpdateJobForLeadGeneration(Job job)
        {
            TransactionContext tc = null;
            try
            {

                tc = TransactionContext.Begin(true, ServiceName);

                string query = SQLParser.MakeSQL(@"UPDATE Job SET FirstName = %s, LastName = %s, CustomerPhone = %s, Gender = %n,
                                    CustomerDOB = %d, DistrictID = %n, ThanaID = %n, RoadNo = %s,
                                    HouseNo = %s, Landmark = %s, Cpe = %n, CustomeRreferenceType = %n, ReferenceCustomerID = %n, Remarks = %s, SalesProgramID = %n,
                                    ModifiedBy = %n, ModifiedDate =%s
                                    WHERE JobID =%n", job.FirstName, job.LastName, job.CustomerPhone, job.Gender, job.CustomerDOB,
                                     job.DistrictId, job.ThanaID, job.RoadNo, job.HouseNo, job.Landmark, job.Cpe, job.CustomerReferenceType,
                                     job.referenceCustomerID, job.Remarks, job.SalesProgramID, job.ModifiedBy, DateTime.Now, job.PKID);
                tc.ExecuteNonQuery(query);


                tc.End();

                return true;
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }
        }

        public bool CompletePickupJob(long jobID, List<Consignment> consignments)
        {
            TransactionContext tc = null;
            try
            {

                DateTime statusTime = DateTime.Now;
                tc = TransactionContext.Begin(true, ServiceName);
                var conDA = new ConsignmentDA();
                if (consignments != null && consignments.Count > 0)
                {
                    foreach (var item in consignments)
                    {
                        conDA.Insert(tc, item);
                    }
                    UpdateJobAssignmentStatus(tc, jobID.ToString(), EnumJobAssignmentStatus.Completed, null, string.Empty, null, null, null, 0, 0, null, null, 0, 0, string.Empty, 0, string.Empty, 2, string.Empty, string.Empty, string.Empty, string.Empty);
                }
                tc.End();

                return true;
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();

                throw new Exception(e.Message, e);
            }
        }

        #endregion

        #region GetCreditNotes
        public ObjectsTemplate<Job> GetCreditNotes(long customerId)
        {
            ObjectsTemplate<Job> items;

            try
            {
                var tc = TransactionContext.Begin(ServiceName);

                string sql = SQLParser.MakeSQL(@"SELECT j.*, ja.* 
                                                FROM Job j
                                                LEFT JOIN JobAssignment ja ON j.JobID = ja.JobID
                                                WHERE j.JobTypeID = %n AND j.CustomerID = %n AND j.Status = %n",
                                                JobTypeEnum.CustomerCreditNote, customerId, EnumJobStatus.Approved);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }

            return items;
        }

        #endregion

        public ObjectsTemplate<Job> GetJobByTeamID(long teamID)
        {
            TransactionContext tc;
            ObjectsTemplate<Job> items;

            try
            {
                string sqlClause = string.Empty;

                if (teamID > 0)
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("ja.AssignedFFID=%n", teamID);

                sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("emp.EmployeeType=%n", (int)EmployeeTypeEnum.InstallationTeam);

                string sql = SQLParser.MakeSQL(@"SELECT j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime
                                                  FROM Job j 
                                                  INNER JOIN JobAssignment ja ON ja.JobID = j.JobID
                                                  INNER JOIN Employees emp ON emp.EmployeeID = ja.AssignedFFID %q", sqlClause);
                tc = TransactionContext.Begin(ServiceName);
                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                dr = null;

                tc.End();
            }
            catch (Exception e)
            {

                throw new Exception(e.Message, e);
            }

            return items;
        }

        public ObjectsTemplate<JobRemarksDetails> GetJobRemarksDetail(long jobID)
        {
            ObjectsTemplate<JobRemarksDetails> items;
            ObjectsTemplate<JobRemarksDetails> finalItems = new ObjectsTemplate<JobRemarksDetails>();
            string whereCaluse = string.Empty;

            try
            {
                var tc = TransactionContext.Begin(ServiceName);
                string query = SQLParser.MakeSQL(@"SELECT  CASE cr.CategoryType
                                                     WHEN 1 THEN 'Job Work In Progress'
                                                     WHEN 4 THEN 'On Going Job Status'
                                                     WHEN 3 THEN 'Rejected'
                                                     WHEN 10 THEN 'Reschedule'
                                                     WHEN 17 THEN 'Request Re-Assign'
                                                     WHEN 18 THEN 'Unschedule'
                                                     WHEN 20 THEN 'Cancel'
                                                     WHEN 21 THEN 'Resolution'
                                                     WHEN 22 THEN 'Reason'
                                                     WHEN 23 THEN 'Resolved Over Phone'
                                                      ELSE
                                                        CASE ju.RemarksID
                                                          WHEN 100 THEN 'Resolved Over Phone'
                                                           WHEN 101 THEN 'QR Code Scanning'
                                                       END
                                                    END AS Category,
                                                    ju.RemarksID,ju.Remarks,
                                                    STUFF((SELECT Distinct ',' + CONVERT(VARCHAR(MAX),t1.UpdateTime ,22 )
                                                    FROM JobUpdate t1
                                                    WHERE t1.RemarksID=ju.RemarksID AND t1.JobID=%n
                                                    FOR XML PATH ('')), 1, 1, '') UpdateTimes
                                                    FROM JOBUpdate AS ju 
                                                   LEFT JOIN CustomerRemark cr ON cr.CustomerRemarkId=ju.RemarksID
                                                   WHERE ju.JobID=%n AND ju.RemarksID IS  NOT NULL
                                                   GROUP BY ju.RemarksID,cr.CategoryType,ju.Remarks", jobID, jobID);
                DataReader dr = new DataReader(tc.ExecuteReader(query));
                items = new ObjectsTemplate<JobRemarksDetails>();
                while (dr.Read())
                {
                    JobRemarksDetails item = new JobRemarksDetails();
                    item.CategoryName = dr.GetString("Category", true, null);
                    item.RemarkID = dr.GetInt64("RemarksID", true, 0);
                    item.Remarks = dr.GetString("Remarks", true, null);
                    item.UpdateTimes = dr.GetString("UpdateTimes", true, null);
                    items.Add(item);
                }
                dr.Close();
                tc.End();

                if (items.Count > 0)
                {
                    foreach (var item in items)
                    {
                        if (item.RemarkID == 0)
                            continue;
                        finalItems.Add(item);
                    }
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return finalItems;
        }
        public ObjectsTemplate<Job> GetTeamJobByDistributorID(long DistributorID)
        {
            TransactionContext tc;
            ObjectsTemplate<Job> items;

            try
            {
                string sqlClause = string.Empty;

                if (DistributorID > 0)
                    sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("j.DistributorID=%n", DistributorID);

                sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("em.EmployeeType=%n", (int)EmployeeTypeEnum.InstallationTeam);

                string sql = SQLParser.MakeSQL(@"SELECT j.*,ja.AssignedFFID,ja.AssignedTime,ja.AssignmentStatus,ja.StatusTime
                                                     FROM Job j INNER JOIN Employees em ON j.DistributorId = em.DistributorID
                                            LEFT JOIN JobAssignment ja ON ja.JobID = j.JobID
                                            LEFT JOIN Employees emp ON emp.EmployeeID = ja.AssignedFFID
                                            LEFT JOIN Countries country ON country.CountryID = j.CountryID %q", sqlClause);
                tc = TransactionContext.Begin(ServiceName);
                DataReader dr = new DataReader(tc.ExecuteReader(sql));
                items = CreateJobObjects(dr);
                dr.Close();
                dr = null;

                tc.End();
            }
            catch (Exception e)
            {

                throw new Exception(e.Message, e);
            }

            return items;
        }

        private long SaveCustomer(TransactionContext tc, Job item)
        {
            BusinessPartnerDA ocus = new BusinessPartnerDA();
            BusinessPartner bp = null;
            long customerID = 0;
            //if (item.CustomerID > 0)
            //{
            bp = ocus.GetbyMobileNo(tc, item.CustomerPhone);
            //}
            //if (bp == null && !string.IsNullOrEmpty(item.CustomerMobileNo))
            //{
            //    bp = ocus.GetbyMobileNo(tc, item.CustomerMobileNo);
            //}
            if (bp == null)
            {
                bp = new BusinessPartner();
                bp.Code1 = GlobalIDDA.GenerateID(tc, IDGenModulesEnum.BusinessPartner_Code, null);
                bp.EnlistmentDate = DateTime.Now;
                bp.BPCategoryEnum = BPCategoryEnum.Customer;
                bp.Status = StatusEnum.Active;
                bp.IsLocal = true;
            }
            bp.Name = item.CustomerName;

            if (bp.BPAddress == null)
            {
                bp.BPAddress = new Address();
            }
            bp.BPAddress.AddressLine1 = item.CustomerAddress;
            //bp.BPAddress.AddressLine2 = item.CustomerAddressNew;
            bp.BPAddress.CreatedBy = item.CreatedBy;
            bp.BPAddress.CreatedDate = item.CreatedDate;
            bp.BPAddress.ModifiedBy = item.CreatedBy;
            bp.BPAddress.ModifiedDate = item.CreatedDate;

            if (bp.BPeContact == null)
            {
                bp.BPeContact = new EContact();
            }

            bp.BPeContact.MobileNo = item.CustomerPhone;
            bp.BPeContact.Phone = null;
            bp.BPeContact.CreatedBy = item.CreatedBy;
            bp.BPeContact.CreatedDate = item.CreatedDate;
            bp.BPeContact.ModifiedBy = item.ModifiedBy;
            bp.BPeContact.ModifiedDate = item.ModifiedDate;
            bp.DateOfBirth = item.CustomerDOB;
            bp.NationalID = item.CustomerNID;
            bp.OwnerMobile = item.CustomerPhone;
            bp.CreatedBy = item.CreatedBy;
            bp.CreatedDate = item.CreatedDate;
            bp.ModifiedBy = item.ModifiedBy;
            bp.ModifiedDate = item.ModifiedDate;
            bp.Gender = item.Gender == null ? GenderTypeEnum.None : (GenderTypeEnum)item.Gender;

            item.CustomerID = new BusinessPartnerDA().Save(tc, bp, null, true);
            customerID = (long)item.CustomerID;

            return customerID;
        }

        #region Delete
        public bool DeleteJob(long jobID)
        {
            TransactionContext tc = null;
            try
            {
                tc = TransactionContext.Begin(true, ServiceName);

                tc.ExecuteNonQuery(string.Format("DELETE FROM ConsignmentPickupDestination WHERE JobID = {0};"
                                                 + "DELETE FROM JobUpdate WHERE JobID = {0};"
                                                 + "DELETE FROM JobAssignment WHERE JobID = {0};"
                                                 + "DELETE FROM JobAssignmentHistory WHERE JobID = {0};"
                                                 + "DELETE FROM JobNotification WHERE JobID = {0};"
                                                 + "DELETE FROM JobAttachment WHERE JobID = {0};"
                                                 + "DELETE FROM Job WHERE JobID = {0}", jobID));

                tc.End();
            }
            catch (Exception e)
            {
                if (tc != null)
                    tc.HandleError();
                throw new Exception(e.Message, e);
            }
            return true;
        }

        #endregion

        #region IsExist
        public bool CheckPaymentConfirmationPermissionByUserId(long userId, string ModuleID)
        {
            TransactionContext tc;
            string sqlClause = string.Empty;
            bool temp = false;
            try
            {
                tc = TransactionContext.Begin(ServiceName);
                sqlClause = SQLParser.TagSQL(sqlClause) + SQLParser.MakeSQL("u.UserID= %n AND gp.ModuleID = %s", userId, ModuleID);

                string sql = SQLParser.MakeSQL("SELECT AllowSelect, AllowAdd, AllowEdit, AllowDelete FROM Users u " +
                                               "INNER JOIN UserGroups ug ON ug.userID = u.UserID " +
                                               "INNER JOIN GroupPermissions gp ON ug.GroupID = gp.GroupID %q", sqlClause);

                DataReader dr = new DataReader(tc.ExecuteReader(sql));

                if (dr.Read())
                {
                    temp = dr.GetBoolean("AllowDelete", true, false);
                }
                dr.Close();
                tc.End();
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return temp;
        }
        public bool CheckPaymentConfirmationPermissionByUserId(long userId, string ModuleID, out string message)
        {
            message = "Permission denied";
            bool isExist = false;

            isExist = CheckPaymentConfirmationPermissionByUserId(userId, ModuleID);
            if (isExist)
            {
                message = "Ok";
                isExist = true;
            }

            return isExist;
        }



        #endregion

        #region SaveLeadGeneration
        public long SaveLeadGeneration(Job item)
        {
            long id = 0;
            TransactionContext tc = null;
            try
            {
                tc = TransactionContext.Begin(true, ServiceName);

                if (item.IsNew)
                {
                    item.CreatedDate = item.EntryDateTime = item.IssueDate = DateTime.Now;
                }
                else
                {
                    item.ModifiedDate = DateTime.Now;
                }

                id = SaveLeadGeneration(tc, item);

                tc.End();
            }
            catch (Exception e)
            {
                tc?.HandleError();
                throw new Exception(e.Message, e);
            }
            return id;
        }

        private long SaveLeadGeneration(TransactionContext tc, Job item)
        {

            if ((item.CustomerReferenceType == CustomerReferenceTypeEnum.Customer) && (item.referenceCustomerID == 0 || item.referenceCustomerID == null))
                throw new Exception("Please select Referrer");

            try
            {
                var p = new List<SqlParameter>
                {
                    SqlHelperExtension.CreateInParam("@JobTypeID", SqlDbType.Int, item.JobTypeID),
                    SqlHelperExtension.CreateInParam("@JobCode", SqlDbType.VarChar, item.JobCode),
                    SqlHelperExtension.CreateInParam("@IssueDate", SqlDbType.DateTime, item.IssueDate),
                    SqlHelperExtension.CreateInParam("@EntryDateTime", SqlDbType.DateTime, item.EntryDateTime),
                    SqlHelperExtension.CreateInParam("@Status", SqlDbType.Int, item.Status),
                    SqlHelperExtension.CreateInParam("@CreatedBy", SqlDbType.Int, item.CreatedBy),
                    SqlHelperExtension.CreateInParam("@CreatedDate", SqlDbType.DateTime, item.CreatedDate),
                    SqlHelperExtension.CreateInParam("@ModifiedBy", SqlDbType.Int, item.ModifiedBy),
                    SqlHelperExtension.CreateInParam("@ModifiedDate", SqlDbType.DateTime, item.ModifiedDate),
                    SqlHelperExtension.CreateInParam("@DistrictID",SqlDbType.Int,item.DistrictId),
                    SqlHelperExtension.CreateInParam("@ThanaID",SqlDbType.Int,item.ThanaID),
                    SqlHelperExtension.CreateInParam("@CustomerNID",SqlDbType.VarChar,item.CustomerNID),
                    SqlHelperExtension.CreateInParam("@CustomerDOB",SqlDbType.DateTime,item.CustomerDOB),
                    SqlHelperExtension.CreateInParam("@Gender",SqlDbType.Int,item.Gender),
                    SqlHelperExtension.CreateInParam("@Landmark",SqlDbType.VarChar,item.Landmark),
                    SqlHelperExtension.CreateInParam("@HouseNo",SqlDbType.VarChar,item.HouseNo),
                    SqlHelperExtension.CreateInParam("@RoadNo",SqlDbType.VarChar,item.RoadNo),
                    SqlHelperExtension.CreateInParam("@Cpe",SqlDbType.Int,item.Cpe),
                    SqlHelperExtension.CreateInParam("@FirstName", SqlDbType.VarChar, item.FirstName),
                    SqlHelperExtension.CreateInParam("@LastName", SqlDbType.VarChar, item.LastName),
                    SqlHelperExtension.CreateInParam("@CustomerName", SqlDbType.VarChar, item.CustomerName),
                    SqlHelperExtension.CreateInParam("@CustomerPhone", SqlDbType.VarChar, item.CustomerPhone),
                    SqlHelperExtension.CreateInParam("@ReferenceCustomerID",SqlDbType.Int,item.referenceCustomerID),
                    SqlHelperExtension.CreateInParam("@CustomerReferenceType",SqlDbType.Int, (int)item.CustomerReferenceType),
                    SqlHelperExtension.CreateInParam("@SalesProgramID",SqlDbType.Int,item.SalesProgramID),
                    SqlHelperExtension.CreateInParam("@Remarks",SqlDbType.VarChar,item.Remarks)
                };

                string procName;
                if (item.IsNew)
                {
                    procName = "[dbo].[InsertLeadGeneration]";
                    p.Add(SqlHelperExtension.CreateOutParam("@JobID", SqlDbType.Int, item.PKID));
                }
                else
                {
                    procName = "[dbo].[UpdateLeadGeneration]";
                    p.Add(SqlHelperExtension.CreateInParam("@JobID", SqlDbType.Int, item.PKID));
                }

                tc.ExecuteNonQuery(CommandType.StoredProcedure, procName, p.ToArray());

                if (item.IsNew)
                {
                    item.PKID = Convert.ToInt64(p.First(x => x.ParameterName == "@JobID").Value);
                    UpdateLeadGenerationHeader(tc, item.PKID);
                }
                p = null;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
            return item.PKID;
        }

        private void UpdateLeadGenerationHeader(TransactionContext tc, long jobId)
        {
            try
            {
                tc.ExecuteNonQuery(@"UPDATE Job SET JobCode = %s WHERE JobID = %n", jobId.ToString(), jobId);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }

        #endregion

        #endregion
    }
}